/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 88.0, "minX": 0.0, "maxY": 4151.0, "series": [{"data": [[0.0, 88.0], [0.1, 91.0], [0.2, 93.0], [0.3, 94.0], [0.4, 95.0], [0.5, 95.0], [0.6, 96.0], [0.7, 97.0], [0.8, 103.0], [0.9, 103.0], [1.0, 104.0], [1.1, 106.0], [1.2, 106.0], [1.3, 106.0], [1.4, 107.0], [1.5, 107.0], [1.6, 107.0], [1.7, 110.0], [1.8, 116.0], [1.9, 116.0], [2.0, 119.0], [2.1, 125.0], [2.2, 137.0], [2.3, 162.0], [2.4, 176.0], [2.5, 180.0], [2.6, 181.0], [2.7, 182.0], [2.8, 182.0], [2.9, 185.0], [3.0, 187.0], [3.1, 195.0], [3.2, 198.0], [3.3, 202.0], [3.4, 203.0], [3.5, 204.0], [3.6, 214.0], [3.7, 218.0], [3.8, 219.0], [3.9, 220.0], [4.0, 227.0], [4.1, 228.0], [4.2, 237.0], [4.3, 245.0], [4.4, 246.0], [4.5, 247.0], [4.6, 248.0], [4.7, 255.0], [4.8, 267.0], [4.9, 268.0], [5.0, 284.0], [5.1, 285.0], [5.2, 285.0], [5.3, 287.0], [5.4, 289.0], [5.5, 289.0], [5.6, 291.0], [5.7, 292.0], [5.8, 296.0], [5.9, 297.0], [6.0, 298.0], [6.1, 298.0], [6.2, 299.0], [6.3, 300.0], [6.4, 301.0], [6.5, 302.0], [6.6, 303.0], [6.7, 305.0], [6.8, 309.0], [6.9, 309.0], [7.0, 312.0], [7.1, 315.0], [7.2, 315.0], [7.3, 315.0], [7.4, 316.0], [7.5, 317.0], [7.6, 321.0], [7.7, 321.0], [7.8, 321.0], [7.9, 321.0], [8.0, 322.0], [8.1, 323.0], [8.2, 324.0], [8.3, 325.0], [8.4, 325.0], [8.5, 326.0], [8.6, 327.0], [8.7, 328.0], [8.8, 329.0], [8.9, 329.0], [9.0, 330.0], [9.1, 332.0], [9.2, 332.0], [9.3, 337.0], [9.4, 338.0], [9.5, 340.0], [9.6, 342.0], [9.7, 343.0], [9.8, 343.0], [9.9, 344.0], [10.0, 347.0], [10.1, 349.0], [10.2, 350.0], [10.3, 354.0], [10.4, 355.0], [10.5, 357.0], [10.6, 361.0], [10.7, 363.0], [10.8, 363.0], [10.9, 365.0], [11.0, 365.0], [11.1, 366.0], [11.2, 366.0], [11.3, 367.0], [11.4, 369.0], [11.5, 369.0], [11.6, 370.0], [11.7, 371.0], [11.8, 371.0], [11.9, 372.0], [12.0, 372.0], [12.1, 378.0], [12.2, 378.0], [12.3, 381.0], [12.4, 382.0], [12.5, 383.0], [12.6, 383.0], [12.7, 383.0], [12.8, 384.0], [12.9, 384.0], [13.0, 384.0], [13.1, 385.0], [13.2, 385.0], [13.3, 387.0], [13.4, 387.0], [13.5, 390.0], [13.6, 391.0], [13.7, 391.0], [13.8, 392.0], [13.9, 392.0], [14.0, 393.0], [14.1, 393.0], [14.2, 394.0], [14.3, 394.0], [14.4, 395.0], [14.5, 396.0], [14.6, 396.0], [14.7, 397.0], [14.8, 397.0], [14.9, 398.0], [15.0, 399.0], [15.1, 400.0], [15.2, 401.0], [15.3, 401.0], [15.4, 402.0], [15.5, 402.0], [15.6, 403.0], [15.7, 404.0], [15.8, 404.0], [15.9, 405.0], [16.0, 405.0], [16.1, 405.0], [16.2, 405.0], [16.3, 406.0], [16.4, 406.0], [16.5, 406.0], [16.6, 407.0], [16.7, 407.0], [16.8, 409.0], [16.9, 410.0], [17.0, 410.0], [17.1, 411.0], [17.2, 411.0], [17.3, 411.0], [17.4, 411.0], [17.5, 411.0], [17.6, 411.0], [17.7, 411.0], [17.8, 412.0], [17.9, 413.0], [18.0, 413.0], [18.1, 414.0], [18.2, 414.0], [18.3, 414.0], [18.4, 414.0], [18.5, 414.0], [18.6, 415.0], [18.7, 415.0], [18.8, 415.0], [18.9, 416.0], [19.0, 417.0], [19.1, 417.0], [19.2, 419.0], [19.3, 420.0], [19.4, 420.0], [19.5, 420.0], [19.6, 421.0], [19.7, 421.0], [19.8, 421.0], [19.9, 421.0], [20.0, 421.0], [20.1, 422.0], [20.2, 422.0], [20.3, 423.0], [20.4, 423.0], [20.5, 423.0], [20.6, 424.0], [20.7, 424.0], [20.8, 425.0], [20.9, 425.0], [21.0, 426.0], [21.1, 427.0], [21.2, 427.0], [21.3, 428.0], [21.4, 428.0], [21.5, 428.0], [21.6, 429.0], [21.7, 429.0], [21.8, 429.0], [21.9, 429.0], [22.0, 430.0], [22.1, 430.0], [22.2, 430.0], [22.3, 431.0], [22.4, 431.0], [22.5, 432.0], [22.6, 432.0], [22.7, 432.0], [22.8, 432.0], [22.9, 433.0], [23.0, 433.0], [23.1, 434.0], [23.2, 434.0], [23.3, 434.0], [23.4, 434.0], [23.5, 434.0], [23.6, 435.0], [23.7, 435.0], [23.8, 436.0], [23.9, 436.0], [24.0, 436.0], [24.1, 437.0], [24.2, 438.0], [24.3, 438.0], [24.4, 438.0], [24.5, 438.0], [24.6, 438.0], [24.7, 439.0], [24.8, 439.0], [24.9, 439.0], [25.0, 439.0], [25.1, 440.0], [25.2, 440.0], [25.3, 440.0], [25.4, 441.0], [25.5, 441.0], [25.6, 441.0], [25.7, 443.0], [25.8, 443.0], [25.9, 444.0], [26.0, 444.0], [26.1, 444.0], [26.2, 444.0], [26.3, 445.0], [26.4, 445.0], [26.5, 445.0], [26.6, 445.0], [26.7, 445.0], [26.8, 446.0], [26.9, 446.0], [27.0, 446.0], [27.1, 447.0], [27.2, 447.0], [27.3, 448.0], [27.4, 448.0], [27.5, 448.0], [27.6, 448.0], [27.7, 448.0], [27.8, 450.0], [27.9, 450.0], [28.0, 451.0], [28.1, 451.0], [28.2, 452.0], [28.3, 452.0], [28.4, 452.0], [28.5, 452.0], [28.6, 453.0], [28.7, 453.0], [28.8, 454.0], [28.9, 454.0], [29.0, 455.0], [29.1, 455.0], [29.2, 456.0], [29.3, 457.0], [29.4, 458.0], [29.5, 458.0], [29.6, 459.0], [29.7, 460.0], [29.8, 461.0], [29.9, 461.0], [30.0, 461.0], [30.1, 461.0], [30.2, 462.0], [30.3, 462.0], [30.4, 463.0], [30.5, 463.0], [30.6, 464.0], [30.7, 464.0], [30.8, 465.0], [30.9, 466.0], [31.0, 466.0], [31.1, 466.0], [31.2, 467.0], [31.3, 467.0], [31.4, 468.0], [31.5, 468.0], [31.6, 468.0], [31.7, 468.0], [31.8, 468.0], [31.9, 469.0], [32.0, 470.0], [32.1, 470.0], [32.2, 470.0], [32.3, 470.0], [32.4, 470.0], [32.5, 470.0], [32.6, 470.0], [32.7, 473.0], [32.8, 473.0], [32.9, 473.0], [33.0, 474.0], [33.1, 474.0], [33.2, 474.0], [33.3, 475.0], [33.4, 475.0], [33.5, 476.0], [33.6, 476.0], [33.7, 477.0], [33.8, 477.0], [33.9, 477.0], [34.0, 477.0], [34.1, 478.0], [34.2, 478.0], [34.3, 478.0], [34.4, 478.0], [34.5, 479.0], [34.6, 479.0], [34.7, 479.0], [34.8, 479.0], [34.9, 479.0], [35.0, 479.0], [35.1, 479.0], [35.2, 480.0], [35.3, 480.0], [35.4, 481.0], [35.5, 482.0], [35.6, 483.0], [35.7, 483.0], [35.8, 483.0], [35.9, 483.0], [36.0, 483.0], [36.1, 484.0], [36.2, 484.0], [36.3, 484.0], [36.4, 484.0], [36.5, 486.0], [36.6, 487.0], [36.7, 487.0], [36.8, 487.0], [36.9, 487.0], [37.0, 487.0], [37.1, 489.0], [37.2, 489.0], [37.3, 490.0], [37.4, 490.0], [37.5, 490.0], [37.6, 491.0], [37.7, 491.0], [37.8, 491.0], [37.9, 491.0], [38.0, 492.0], [38.1, 492.0], [38.2, 492.0], [38.3, 492.0], [38.4, 493.0], [38.5, 493.0], [38.6, 493.0], [38.7, 494.0], [38.8, 494.0], [38.9, 494.0], [39.0, 494.0], [39.1, 495.0], [39.2, 495.0], [39.3, 495.0], [39.4, 495.0], [39.5, 495.0], [39.6, 495.0], [39.7, 495.0], [39.8, 496.0], [39.9, 496.0], [40.0, 496.0], [40.1, 496.0], [40.2, 496.0], [40.3, 497.0], [40.4, 497.0], [40.5, 497.0], [40.6, 497.0], [40.7, 497.0], [40.8, 498.0], [40.9, 498.0], [41.0, 498.0], [41.1, 498.0], [41.2, 498.0], [41.3, 499.0], [41.4, 499.0], [41.5, 499.0], [41.6, 499.0], [41.7, 500.0], [41.8, 500.0], [41.9, 500.0], [42.0, 500.0], [42.1, 501.0], [42.2, 501.0], [42.3, 501.0], [42.4, 501.0], [42.5, 502.0], [42.6, 502.0], [42.7, 502.0], [42.8, 503.0], [42.9, 503.0], [43.0, 503.0], [43.1, 503.0], [43.2, 503.0], [43.3, 504.0], [43.4, 504.0], [43.5, 504.0], [43.6, 504.0], [43.7, 504.0], [43.8, 504.0], [43.9, 505.0], [44.0, 505.0], [44.1, 505.0], [44.2, 505.0], [44.3, 506.0], [44.4, 506.0], [44.5, 506.0], [44.6, 507.0], [44.7, 507.0], [44.8, 507.0], [44.9, 507.0], [45.0, 507.0], [45.1, 508.0], [45.2, 508.0], [45.3, 508.0], [45.4, 508.0], [45.5, 509.0], [45.6, 509.0], [45.7, 509.0], [45.8, 509.0], [45.9, 510.0], [46.0, 510.0], [46.1, 510.0], [46.2, 510.0], [46.3, 510.0], [46.4, 510.0], [46.5, 510.0], [46.6, 511.0], [46.7, 511.0], [46.8, 511.0], [46.9, 511.0], [47.0, 511.0], [47.1, 511.0], [47.2, 511.0], [47.3, 511.0], [47.4, 512.0], [47.5, 512.0], [47.6, 512.0], [47.7, 512.0], [47.8, 512.0], [47.9, 512.0], [48.0, 512.0], [48.1, 513.0], [48.2, 513.0], [48.3, 513.0], [48.4, 514.0], [48.5, 514.0], [48.6, 515.0], [48.7, 515.0], [48.8, 515.0], [48.9, 515.0], [49.0, 515.0], [49.1, 516.0], [49.2, 516.0], [49.3, 516.0], [49.4, 516.0], [49.5, 516.0], [49.6, 516.0], [49.7, 517.0], [49.8, 517.0], [49.9, 517.0], [50.0, 517.0], [50.1, 517.0], [50.2, 517.0], [50.3, 517.0], [50.4, 518.0], [50.5, 518.0], [50.6, 518.0], [50.7, 518.0], [50.8, 518.0], [50.9, 518.0], [51.0, 518.0], [51.1, 519.0], [51.2, 519.0], [51.3, 519.0], [51.4, 519.0], [51.5, 519.0], [51.6, 520.0], [51.7, 520.0], [51.8, 520.0], [51.9, 520.0], [52.0, 520.0], [52.1, 520.0], [52.2, 521.0], [52.3, 521.0], [52.4, 521.0], [52.5, 522.0], [52.6, 522.0], [52.7, 522.0], [52.8, 522.0], [52.9, 522.0], [53.0, 522.0], [53.1, 523.0], [53.2, 523.0], [53.3, 523.0], [53.4, 523.0], [53.5, 523.0], [53.6, 523.0], [53.7, 523.0], [53.8, 524.0], [53.9, 524.0], [54.0, 525.0], [54.1, 525.0], [54.2, 525.0], [54.3, 525.0], [54.4, 525.0], [54.5, 526.0], [54.6, 526.0], [54.7, 527.0], [54.8, 527.0], [54.9, 527.0], [55.0, 527.0], [55.1, 527.0], [55.2, 528.0], [55.3, 528.0], [55.4, 528.0], [55.5, 528.0], [55.6, 528.0], [55.7, 528.0], [55.8, 528.0], [55.9, 528.0], [56.0, 528.0], [56.1, 529.0], [56.2, 530.0], [56.3, 530.0], [56.4, 530.0], [56.5, 530.0], [56.6, 531.0], [56.7, 531.0], [56.8, 531.0], [56.9, 531.0], [57.0, 532.0], [57.1, 532.0], [57.2, 533.0], [57.3, 533.0], [57.4, 533.0], [57.5, 534.0], [57.6, 534.0], [57.7, 534.0], [57.8, 534.0], [57.9, 534.0], [58.0, 534.0], [58.1, 535.0], [58.2, 535.0], [58.3, 536.0], [58.4, 536.0], [58.5, 536.0], [58.6, 536.0], [58.7, 537.0], [58.8, 537.0], [58.9, 537.0], [59.0, 537.0], [59.1, 537.0], [59.2, 538.0], [59.3, 538.0], [59.4, 538.0], [59.5, 538.0], [59.6, 538.0], [59.7, 538.0], [59.8, 538.0], [59.9, 538.0], [60.0, 538.0], [60.1, 539.0], [60.2, 540.0], [60.3, 540.0], [60.4, 540.0], [60.5, 540.0], [60.6, 540.0], [60.7, 540.0], [60.8, 540.0], [60.9, 541.0], [61.0, 541.0], [61.1, 541.0], [61.2, 541.0], [61.3, 541.0], [61.4, 541.0], [61.5, 541.0], [61.6, 542.0], [61.7, 542.0], [61.8, 542.0], [61.9, 542.0], [62.0, 542.0], [62.1, 542.0], [62.2, 542.0], [62.3, 543.0], [62.4, 543.0], [62.5, 544.0], [62.6, 544.0], [62.7, 544.0], [62.8, 544.0], [62.9, 544.0], [63.0, 544.0], [63.1, 545.0], [63.2, 545.0], [63.3, 545.0], [63.4, 545.0], [63.5, 545.0], [63.6, 545.0], [63.7, 546.0], [63.8, 547.0], [63.9, 547.0], [64.0, 547.0], [64.1, 547.0], [64.2, 547.0], [64.3, 547.0], [64.4, 547.0], [64.5, 548.0], [64.6, 548.0], [64.7, 548.0], [64.8, 548.0], [64.9, 549.0], [65.0, 550.0], [65.1, 550.0], [65.2, 550.0], [65.3, 550.0], [65.4, 550.0], [65.5, 550.0], [65.6, 550.0], [65.7, 551.0], [65.8, 551.0], [65.9, 551.0], [66.0, 552.0], [66.1, 552.0], [66.2, 552.0], [66.3, 553.0], [66.4, 553.0], [66.5, 553.0], [66.6, 553.0], [66.7, 554.0], [66.8, 554.0], [66.9, 554.0], [67.0, 554.0], [67.1, 554.0], [67.2, 555.0], [67.3, 555.0], [67.4, 555.0], [67.5, 556.0], [67.6, 557.0], [67.7, 557.0], [67.8, 557.0], [67.9, 557.0], [68.0, 558.0], [68.1, 558.0], [68.2, 558.0], [68.3, 558.0], [68.4, 558.0], [68.5, 558.0], [68.6, 559.0], [68.7, 559.0], [68.8, 560.0], [68.9, 560.0], [69.0, 561.0], [69.1, 561.0], [69.2, 561.0], [69.3, 561.0], [69.4, 561.0], [69.5, 561.0], [69.6, 561.0], [69.7, 561.0], [69.8, 562.0], [69.9, 562.0], [70.0, 562.0], [70.1, 562.0], [70.2, 562.0], [70.3, 563.0], [70.4, 563.0], [70.5, 563.0], [70.6, 563.0], [70.7, 563.0], [70.8, 563.0], [70.9, 563.0], [71.0, 565.0], [71.1, 565.0], [71.2, 565.0], [71.3, 565.0], [71.4, 565.0], [71.5, 565.0], [71.6, 565.0], [71.7, 566.0], [71.8, 566.0], [71.9, 567.0], [72.0, 567.0], [72.1, 567.0], [72.2, 567.0], [72.3, 568.0], [72.4, 568.0], [72.5, 568.0], [72.6, 568.0], [72.7, 568.0], [72.8, 569.0], [72.9, 569.0], [73.0, 569.0], [73.1, 570.0], [73.2, 570.0], [73.3, 570.0], [73.4, 570.0], [73.5, 571.0], [73.6, 571.0], [73.7, 571.0], [73.8, 571.0], [73.9, 571.0], [74.0, 571.0], [74.1, 572.0], [74.2, 572.0], [74.3, 572.0], [74.4, 572.0], [74.5, 573.0], [74.6, 573.0], [74.7, 573.0], [74.8, 574.0], [74.9, 574.0], [75.0, 574.0], [75.1, 574.0], [75.2, 575.0], [75.3, 575.0], [75.4, 575.0], [75.5, 575.0], [75.6, 576.0], [75.7, 576.0], [75.8, 576.0], [75.9, 577.0], [76.0, 578.0], [76.1, 578.0], [76.2, 578.0], [76.3, 578.0], [76.4, 578.0], [76.5, 578.0], [76.6, 578.0], [76.7, 580.0], [76.8, 580.0], [76.9, 581.0], [77.0, 581.0], [77.1, 581.0], [77.2, 582.0], [77.3, 582.0], [77.4, 583.0], [77.5, 583.0], [77.6, 583.0], [77.7, 583.0], [77.8, 583.0], [77.9, 583.0], [78.0, 585.0], [78.1, 586.0], [78.2, 586.0], [78.3, 587.0], [78.4, 587.0], [78.5, 589.0], [78.6, 589.0], [78.7, 589.0], [78.8, 590.0], [78.9, 590.0], [79.0, 591.0], [79.1, 591.0], [79.2, 591.0], [79.3, 591.0], [79.4, 591.0], [79.5, 592.0], [79.6, 594.0], [79.7, 595.0], [79.8, 595.0], [79.9, 595.0], [80.0, 595.0], [80.1, 596.0], [80.2, 597.0], [80.3, 597.0], [80.4, 598.0], [80.5, 598.0], [80.6, 599.0], [80.7, 599.0], [80.8, 600.0], [80.9, 601.0], [81.0, 601.0], [81.1, 601.0], [81.2, 602.0], [81.3, 602.0], [81.4, 602.0], [81.5, 603.0], [81.6, 603.0], [81.7, 604.0], [81.8, 604.0], [81.9, 604.0], [82.0, 604.0], [82.1, 604.0], [82.2, 604.0], [82.3, 605.0], [82.4, 606.0], [82.5, 606.0], [82.6, 607.0], [82.7, 607.0], [82.8, 607.0], [82.9, 608.0], [83.0, 609.0], [83.1, 610.0], [83.2, 611.0], [83.3, 611.0], [83.4, 611.0], [83.5, 611.0], [83.6, 613.0], [83.7, 614.0], [83.8, 614.0], [83.9, 616.0], [84.0, 616.0], [84.1, 618.0], [84.2, 618.0], [84.3, 619.0], [84.4, 620.0], [84.5, 620.0], [84.6, 621.0], [84.7, 621.0], [84.8, 621.0], [84.9, 621.0], [85.0, 621.0], [85.1, 622.0], [85.2, 624.0], [85.3, 624.0], [85.4, 626.0], [85.5, 627.0], [85.6, 628.0], [85.7, 628.0], [85.8, 629.0], [85.9, 629.0], [86.0, 630.0], [86.1, 630.0], [86.2, 630.0], [86.3, 630.0], [86.4, 631.0], [86.5, 631.0], [86.6, 632.0], [86.7, 632.0], [86.8, 633.0], [86.9, 633.0], [87.0, 634.0], [87.1, 635.0], [87.2, 635.0], [87.3, 636.0], [87.4, 637.0], [87.5, 637.0], [87.6, 638.0], [87.7, 638.0], [87.8, 639.0], [87.9, 639.0], [88.0, 640.0], [88.1, 641.0], [88.2, 641.0], [88.3, 641.0], [88.4, 642.0], [88.5, 643.0], [88.6, 644.0], [88.7, 644.0], [88.8, 645.0], [88.9, 645.0], [89.0, 646.0], [89.1, 646.0], [89.2, 646.0], [89.3, 647.0], [89.4, 649.0], [89.5, 650.0], [89.6, 650.0], [89.7, 650.0], [89.8, 650.0], [89.9, 651.0], [90.0, 651.0], [90.1, 654.0], [90.2, 654.0], [90.3, 654.0], [90.4, 655.0], [90.5, 656.0], [90.6, 656.0], [90.7, 657.0], [90.8, 657.0], [90.9, 657.0], [91.0, 657.0], [91.1, 659.0], [91.2, 661.0], [91.3, 661.0], [91.4, 663.0], [91.5, 665.0], [91.6, 665.0], [91.7, 668.0], [91.8, 669.0], [91.9, 670.0], [92.0, 671.0], [92.1, 671.0], [92.2, 674.0], [92.3, 674.0], [92.4, 675.0], [92.5, 675.0], [92.6, 676.0], [92.7, 676.0], [92.8, 677.0], [92.9, 677.0], [93.0, 678.0], [93.1, 680.0], [93.2, 680.0], [93.3, 680.0], [93.4, 686.0], [93.5, 687.0], [93.6, 688.0], [93.7, 689.0], [93.8, 689.0], [93.9, 691.0], [94.0, 691.0], [94.1, 692.0], [94.2, 693.0], [94.3, 694.0], [94.4, 696.0], [94.5, 696.0], [94.6, 697.0], [94.7, 697.0], [94.8, 697.0], [94.9, 698.0], [95.0, 703.0], [95.1, 705.0], [95.2, 706.0], [95.3, 706.0], [95.4, 707.0], [95.5, 709.0], [95.6, 709.0], [95.7, 712.0], [95.8, 714.0], [95.9, 719.0], [96.0, 720.0], [96.1, 721.0], [96.2, 727.0], [96.3, 729.0], [96.4, 729.0], [96.5, 730.0], [96.6, 731.0], [96.7, 731.0], [96.8, 732.0], [96.9, 733.0], [97.0, 735.0], [97.1, 736.0], [97.2, 738.0], [97.3, 738.0], [97.4, 740.0], [97.5, 740.0], [97.6, 742.0], [97.7, 745.0], [97.8, 747.0], [97.9, 751.0], [98.0, 755.0], [98.1, 758.0], [98.2, 758.0], [98.3, 761.0], [98.4, 773.0], [98.5, 776.0], [98.6, 783.0], [98.7, 784.0], [98.8, 786.0], [98.9, 789.0], [99.0, 797.0], [99.1, 801.0], [99.2, 811.0], [99.3, 823.0], [99.4, 823.0], [99.5, 829.0], [99.6, 829.0], [99.7, 833.0], [99.8, 836.0], [99.9, 860.0]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[0.0, 731.0], [0.1, 731.0], [0.2, 731.0], [0.3, 731.0], [0.4, 731.0], [0.5, 731.0], [0.6, 820.0], [0.7, 820.0], [0.8, 820.0], [0.9, 820.0], [1.0, 820.0], [1.1, 832.0], [1.2, 832.0], [1.3, 832.0], [1.4, 832.0], [1.5, 832.0], [1.6, 973.0], [1.7, 973.0], [1.8, 973.0], [1.9, 973.0], [2.0, 973.0], [2.1, 997.0], [2.2, 997.0], [2.3, 997.0], [2.4, 997.0], [2.5, 997.0], [2.6, 1048.0], [2.7, 1048.0], [2.8, 1048.0], [2.9, 1048.0], [3.0, 1048.0], [3.1, 1130.0], [3.2, 1130.0], [3.3, 1130.0], [3.4, 1130.0], [3.5, 1130.0], [3.6, 1478.0], [3.7, 1478.0], [3.8, 1478.0], [3.9, 1478.0], [4.0, 1478.0], [4.1, 1562.0], [4.2, 1562.0], [4.3, 1562.0], [4.4, 1562.0], [4.5, 1562.0], [4.6, 1650.0], [4.7, 1650.0], [4.8, 1650.0], [4.9, 1650.0], [5.0, 1650.0], [5.1, 1853.0], [5.2, 1853.0], [5.3, 1853.0], [5.4, 1853.0], [5.5, 1853.0], [5.6, 1974.0], [5.7, 1974.0], [5.8, 1974.0], [5.9, 1974.0], [6.0, 1974.0], [6.1, 2230.0], [6.2, 2230.0], [6.3, 2230.0], [6.4, 2230.0], [6.5, 2230.0], [6.6, 2282.0], [6.7, 2282.0], [6.8, 2282.0], [6.9, 2282.0], [7.0, 2282.0], [7.1, 2282.0], [7.2, 2305.0], [7.3, 2305.0], [7.4, 2305.0], [7.5, 2305.0], [7.6, 2305.0], [7.7, 2309.0], [7.8, 2309.0], [7.9, 2309.0], [8.0, 2309.0], [8.1, 2309.0], [8.2, 2424.0], [8.3, 2424.0], [8.4, 2424.0], [8.5, 2424.0], [8.6, 2424.0], [8.7, 2457.0], [8.8, 2457.0], [8.9, 2457.0], [9.0, 2457.0], [9.1, 2457.0], [9.2, 2489.0], [9.3, 2489.0], [9.4, 2489.0], [9.5, 2489.0], [9.6, 2489.0], [9.7, 2537.0], [9.8, 2537.0], [9.9, 2537.0], [10.0, 2537.0], [10.1, 2537.0], [10.2, 2584.0], [10.3, 2584.0], [10.4, 2584.0], [10.5, 2584.0], [10.6, 2584.0], [10.7, 2649.0], [10.8, 2649.0], [10.9, 2649.0], [11.0, 2649.0], [11.1, 2649.0], [11.2, 2727.0], [11.3, 2727.0], [11.4, 2727.0], [11.5, 2727.0], [11.6, 2727.0], [11.7, 2764.0], [11.8, 2764.0], [11.9, 2764.0], [12.0, 2764.0], [12.1, 2764.0], [12.2, 2781.0], [12.3, 2781.0], [12.4, 2781.0], [12.5, 2781.0], [12.6, 2781.0], [12.7, 2792.0], [12.8, 2792.0], [12.9, 2792.0], [13.0, 2792.0], [13.1, 2792.0], [13.2, 2792.0], [13.3, 2792.0], [13.4, 2792.0], [13.5, 2792.0], [13.6, 2792.0], [13.7, 2792.0], [13.8, 2807.0], [13.9, 2807.0], [14.0, 2807.0], [14.1, 2807.0], [14.2, 2807.0], [14.3, 2817.0], [14.4, 2817.0], [14.5, 2817.0], [14.6, 2817.0], [14.7, 2817.0], [14.8, 2817.0], [14.9, 2817.0], [15.0, 2817.0], [15.1, 2817.0], [15.2, 2817.0], [15.3, 2830.0], [15.4, 2830.0], [15.5, 2830.0], [15.6, 2830.0], [15.7, 2830.0], [15.8, 2845.0], [15.9, 2845.0], [16.0, 2845.0], [16.1, 2845.0], [16.2, 2845.0], [16.3, 2846.0], [16.4, 2846.0], [16.5, 2846.0], [16.6, 2846.0], [16.7, 2846.0], [16.8, 2847.0], [16.9, 2847.0], [17.0, 2847.0], [17.1, 2847.0], [17.2, 2847.0], [17.3, 2847.0], [17.4, 2847.0], [17.5, 2847.0], [17.6, 2847.0], [17.7, 2847.0], [17.8, 2848.0], [17.9, 2848.0], [18.0, 2848.0], [18.1, 2848.0], [18.2, 2848.0], [18.3, 2849.0], [18.4, 2849.0], [18.5, 2849.0], [18.6, 2849.0], [18.7, 2849.0], [18.8, 2851.0], [18.9, 2851.0], [19.0, 2851.0], [19.1, 2851.0], [19.2, 2851.0], [19.3, 2852.0], [19.4, 2852.0], [19.5, 2852.0], [19.6, 2852.0], [19.7, 2852.0], [19.8, 2854.0], [19.9, 2854.0], [20.0, 2854.0], [20.1, 2854.0], [20.2, 2854.0], [20.3, 2854.0], [20.4, 2858.0], [20.5, 2858.0], [20.6, 2858.0], [20.7, 2858.0], [20.8, 2858.0], [20.9, 2859.0], [21.0, 2859.0], [21.1, 2859.0], [21.2, 2859.0], [21.3, 2859.0], [21.4, 2862.0], [21.5, 2862.0], [21.6, 2862.0], [21.7, 2862.0], [21.8, 2862.0], [21.9, 2865.0], [22.0, 2865.0], [22.1, 2865.0], [22.2, 2865.0], [22.3, 2865.0], [22.4, 2865.0], [22.5, 2865.0], [22.6, 2865.0], [22.7, 2865.0], [22.8, 2865.0], [22.9, 2866.0], [23.0, 2866.0], [23.1, 2866.0], [23.2, 2866.0], [23.3, 2866.0], [23.4, 2868.0], [23.5, 2868.0], [23.6, 2868.0], [23.7, 2868.0], [23.8, 2868.0], [23.9, 2870.0], [24.0, 2870.0], [24.1, 2870.0], [24.2, 2870.0], [24.3, 2870.0], [24.4, 2870.0], [24.5, 2870.0], [24.6, 2870.0], [24.7, 2870.0], [24.8, 2870.0], [24.9, 2876.0], [25.0, 2876.0], [25.1, 2876.0], [25.2, 2876.0], [25.3, 2876.0], [25.4, 2878.0], [25.5, 2878.0], [25.6, 2878.0], [25.7, 2878.0], [25.8, 2878.0], [25.9, 2879.0], [26.0, 2879.0], [26.1, 2879.0], [26.2, 2879.0], [26.3, 2879.0], [26.4, 2881.0], [26.5, 2881.0], [26.6, 2881.0], [26.7, 2881.0], [26.8, 2881.0], [26.9, 2881.0], [27.0, 2881.0], [27.1, 2881.0], [27.2, 2881.0], [27.3, 2881.0], [27.4, 2881.0], [27.5, 2884.0], [27.6, 2884.0], [27.7, 2884.0], [27.8, 2884.0], [27.9, 2884.0], [28.0, 2886.0], [28.1, 2886.0], [28.2, 2886.0], [28.3, 2886.0], [28.4, 2886.0], [28.5, 2888.0], [28.6, 2888.0], [28.7, 2888.0], [28.8, 2888.0], [28.9, 2888.0], [29.0, 2890.0], [29.1, 2890.0], [29.2, 2890.0], [29.3, 2890.0], [29.4, 2890.0], [29.5, 2890.0], [29.6, 2890.0], [29.7, 2890.0], [29.8, 2890.0], [29.9, 2890.0], [30.0, 2890.0], [30.1, 2890.0], [30.2, 2890.0], [30.3, 2890.0], [30.4, 2890.0], [30.5, 2891.0], [30.6, 2891.0], [30.7, 2891.0], [30.8, 2891.0], [30.9, 2891.0], [31.0, 2891.0], [31.1, 2891.0], [31.2, 2891.0], [31.3, 2891.0], [31.4, 2891.0], [31.5, 2892.0], [31.6, 2892.0], [31.7, 2892.0], [31.8, 2892.0], [31.9, 2892.0], [32.0, 2892.0], [32.1, 2892.0], [32.2, 2892.0], [32.3, 2892.0], [32.4, 2892.0], [32.5, 2892.0], [32.6, 2892.0], [32.7, 2892.0], [32.8, 2892.0], [32.9, 2892.0], [33.0, 2894.0], [33.1, 2894.0], [33.2, 2894.0], [33.3, 2894.0], [33.4, 2894.0], [33.5, 2894.0], [33.6, 2895.0], [33.7, 2895.0], [33.8, 2895.0], [33.9, 2895.0], [34.0, 2895.0], [34.1, 2896.0], [34.2, 2896.0], [34.3, 2896.0], [34.4, 2896.0], [34.5, 2896.0], [34.6, 2896.0], [34.7, 2896.0], [34.8, 2896.0], [34.9, 2896.0], [35.0, 2896.0], [35.1, 2898.0], [35.2, 2898.0], [35.3, 2898.0], [35.4, 2898.0], [35.5, 2898.0], [35.6, 2898.0], [35.7, 2898.0], [35.8, 2898.0], [35.9, 2898.0], [36.0, 2898.0], [36.1, 2899.0], [36.2, 2899.0], [36.3, 2899.0], [36.4, 2899.0], [36.5, 2899.0], [36.6, 2899.0], [36.7, 2899.0], [36.8, 2899.0], [36.9, 2899.0], [37.0, 2899.0], [37.1, 2901.0], [37.2, 2901.0], [37.3, 2901.0], [37.4, 2901.0], [37.5, 2901.0], [37.6, 2903.0], [37.7, 2903.0], [37.8, 2903.0], [37.9, 2903.0], [38.0, 2903.0], [38.1, 2904.0], [38.2, 2904.0], [38.3, 2904.0], [38.4, 2904.0], [38.5, 2904.0], [38.6, 2904.0], [38.7, 2904.0], [38.8, 2904.0], [38.9, 2904.0], [39.0, 2904.0], [39.1, 2906.0], [39.2, 2906.0], [39.3, 2906.0], [39.4, 2906.0], [39.5, 2906.0], [39.6, 2906.0], [39.7, 2906.0], [39.8, 2906.0], [39.9, 2906.0], [40.0, 2906.0], [40.1, 2906.0], [40.2, 2907.0], [40.3, 2907.0], [40.4, 2907.0], [40.5, 2907.0], [40.6, 2907.0], [40.7, 2907.0], [40.8, 2907.0], [40.9, 2907.0], [41.0, 2907.0], [41.1, 2907.0], [41.2, 2908.0], [41.3, 2908.0], [41.4, 2908.0], [41.5, 2908.0], [41.6, 2908.0], [41.7, 2910.0], [41.8, 2910.0], [41.9, 2910.0], [42.0, 2910.0], [42.1, 2910.0], [42.2, 2911.0], [42.3, 2911.0], [42.4, 2911.0], [42.5, 2911.0], [42.6, 2911.0], [42.7, 2913.0], [42.8, 2913.0], [42.9, 2913.0], [43.0, 2913.0], [43.1, 2913.0], [43.2, 2913.0], [43.3, 2913.0], [43.4, 2913.0], [43.5, 2913.0], [43.6, 2913.0], [43.7, 2913.0], [43.8, 2913.0], [43.9, 2913.0], [44.0, 2913.0], [44.1, 2913.0], [44.2, 2914.0], [44.3, 2914.0], [44.4, 2914.0], [44.5, 2914.0], [44.6, 2914.0], [44.7, 2914.0], [44.8, 2914.0], [44.9, 2914.0], [45.0, 2914.0], [45.1, 2914.0], [45.2, 2914.0], [45.3, 2914.0], [45.4, 2914.0], [45.5, 2914.0], [45.6, 2914.0], [45.7, 2915.0], [45.8, 2915.0], [45.9, 2915.0], [46.0, 2915.0], [46.1, 2915.0], [46.2, 2917.0], [46.3, 2917.0], [46.4, 2917.0], [46.5, 2917.0], [46.6, 2917.0], [46.7, 2917.0], [46.8, 2917.0], [46.9, 2917.0], [47.0, 2917.0], [47.1, 2917.0], [47.2, 2917.0], [47.3, 2918.0], [47.4, 2918.0], [47.5, 2918.0], [47.6, 2918.0], [47.7, 2918.0], [47.8, 2919.0], [47.9, 2919.0], [48.0, 2919.0], [48.1, 2919.0], [48.2, 2919.0], [48.3, 2919.0], [48.4, 2919.0], [48.5, 2919.0], [48.6, 2919.0], [48.7, 2919.0], [48.8, 2920.0], [48.9, 2920.0], [49.0, 2920.0], [49.1, 2920.0], [49.2, 2920.0], [49.3, 2921.0], [49.4, 2921.0], [49.5, 2921.0], [49.6, 2921.0], [49.7, 2921.0], [49.8, 2921.0], [49.9, 2921.0], [50.0, 2921.0], [50.1, 2921.0], [50.2, 2921.0], [50.3, 2922.0], [50.4, 2922.0], [50.5, 2922.0], [50.6, 2922.0], [50.7, 2922.0], [50.8, 2923.0], [50.9, 2923.0], [51.0, 2923.0], [51.1, 2923.0], [51.2, 2923.0], [51.3, 2925.0], [51.4, 2925.0], [51.5, 2925.0], [51.6, 2925.0], [51.7, 2925.0], [51.8, 2925.0], [51.9, 2925.0], [52.0, 2925.0], [52.1, 2925.0], [52.2, 2925.0], [52.3, 2926.0], [52.4, 2926.0], [52.5, 2926.0], [52.6, 2926.0], [52.7, 2926.0], [52.8, 2927.0], [52.9, 2927.0], [53.0, 2927.0], [53.1, 2927.0], [53.2, 2927.0], [53.3, 2927.0], [53.4, 2927.0], [53.5, 2927.0], [53.6, 2927.0], [53.7, 2927.0], [53.8, 2927.0], [53.9, 2928.0], [54.0, 2928.0], [54.1, 2928.0], [54.2, 2928.0], [54.3, 2928.0], [54.4, 2929.0], [54.5, 2929.0], [54.6, 2929.0], [54.7, 2929.0], [54.8, 2929.0], [54.9, 2933.0], [55.0, 2933.0], [55.1, 2933.0], [55.2, 2933.0], [55.3, 2933.0], [55.4, 2935.0], [55.5, 2935.0], [55.6, 2935.0], [55.7, 2935.0], [55.8, 2935.0], [55.9, 2936.0], [56.0, 2936.0], [56.1, 2936.0], [56.2, 2936.0], [56.3, 2936.0], [56.4, 2936.0], [56.5, 2936.0], [56.6, 2936.0], [56.7, 2936.0], [56.8, 2936.0], [56.9, 2937.0], [57.0, 2937.0], [57.1, 2937.0], [57.2, 2937.0], [57.3, 2937.0], [57.4, 2940.0], [57.5, 2940.0], [57.6, 2940.0], [57.7, 2940.0], [57.8, 2940.0], [57.9, 2943.0], [58.0, 2943.0], [58.1, 2943.0], [58.2, 2943.0], [58.3, 2943.0], [58.4, 2944.0], [58.5, 2944.0], [58.6, 2944.0], [58.7, 2944.0], [58.8, 2944.0], [58.9, 2945.0], [59.0, 2945.0], [59.1, 2945.0], [59.2, 2945.0], [59.3, 2945.0], [59.4, 2946.0], [59.5, 2946.0], [59.6, 2946.0], [59.7, 2946.0], [59.8, 2946.0], [59.9, 2948.0], [60.0, 2948.0], [60.1, 2948.0], [60.2, 2948.0], [60.3, 2948.0], [60.4, 2948.0], [60.5, 2950.0], [60.6, 2950.0], [60.7, 2950.0], [60.8, 2950.0], [60.9, 2950.0], [61.0, 2951.0], [61.1, 2951.0], [61.2, 2951.0], [61.3, 2951.0], [61.4, 2951.0], [61.5, 2952.0], [61.6, 2952.0], [61.7, 2952.0], [61.8, 2952.0], [61.9, 2952.0], [62.0, 2953.0], [62.1, 2953.0], [62.2, 2953.0], [62.3, 2953.0], [62.4, 2953.0], [62.5, 2954.0], [62.6, 2954.0], [62.7, 2954.0], [62.8, 2954.0], [62.9, 2954.0], [63.0, 2957.0], [63.1, 2957.0], [63.2, 2957.0], [63.3, 2957.0], [63.4, 2957.0], [63.5, 2958.0], [63.6, 2958.0], [63.7, 2958.0], [63.8, 2958.0], [63.9, 2958.0], [64.0, 2958.0], [64.1, 2958.0], [64.2, 2958.0], [64.3, 2958.0], [64.4, 2958.0], [64.5, 2959.0], [64.6, 2959.0], [64.7, 2959.0], [64.8, 2959.0], [64.9, 2959.0], [65.0, 2961.0], [65.1, 2961.0], [65.2, 2961.0], [65.3, 2961.0], [65.4, 2961.0], [65.5, 2961.0], [65.6, 2961.0], [65.7, 2961.0], [65.8, 2961.0], [65.9, 2961.0], [66.0, 2964.0], [66.1, 2964.0], [66.2, 2964.0], [66.3, 2964.0], [66.4, 2964.0], [66.5, 2969.0], [66.6, 2969.0], [66.7, 2969.0], [66.8, 2969.0], [66.9, 2969.0], [67.0, 2969.0], [67.1, 2974.0], [67.2, 2974.0], [67.3, 2974.0], [67.4, 2974.0], [67.5, 2974.0], [67.6, 2983.0], [67.7, 2983.0], [67.8, 2983.0], [67.9, 2983.0], [68.0, 2983.0], [68.1, 3007.0], [68.2, 3007.0], [68.3, 3007.0], [68.4, 3007.0], [68.5, 3007.0], [68.6, 3011.0], [68.7, 3011.0], [68.8, 3011.0], [68.9, 3011.0], [69.0, 3011.0], [69.1, 3017.0], [69.2, 3017.0], [69.3, 3017.0], [69.4, 3017.0], [69.5, 3017.0], [69.6, 3033.0], [69.7, 3033.0], [69.8, 3033.0], [69.9, 3033.0], [70.0, 3033.0], [70.1, 3056.0], [70.2, 3056.0], [70.3, 3056.0], [70.4, 3056.0], [70.5, 3056.0], [70.6, 3060.0], [70.7, 3060.0], [70.8, 3060.0], [70.9, 3060.0], [71.0, 3060.0], [71.1, 3071.0], [71.2, 3071.0], [71.3, 3071.0], [71.4, 3071.0], [71.5, 3071.0], [71.6, 3107.0], [71.7, 3107.0], [71.8, 3107.0], [71.9, 3107.0], [72.0, 3107.0], [72.1, 3138.0], [72.2, 3138.0], [72.3, 3138.0], [72.4, 3138.0], [72.5, 3138.0], [72.6, 3165.0], [72.7, 3165.0], [72.8, 3165.0], [72.9, 3165.0], [73.0, 3165.0], [73.1, 3205.0], [73.2, 3205.0], [73.3, 3205.0], [73.4, 3205.0], [73.5, 3205.0], [73.6, 3205.0], [73.7, 3247.0], [73.8, 3247.0], [73.9, 3247.0], [74.0, 3247.0], [74.1, 3247.0], [74.2, 3287.0], [74.3, 3287.0], [74.4, 3287.0], [74.5, 3287.0], [74.6, 3287.0], [74.7, 3366.0], [74.8, 3366.0], [74.9, 3366.0], [75.0, 3366.0], [75.1, 3366.0], [75.2, 3376.0], [75.3, 3376.0], [75.4, 3376.0], [75.5, 3376.0], [75.6, 3376.0], [75.7, 3411.0], [75.8, 3411.0], [75.9, 3411.0], [76.0, 3411.0], [76.1, 3411.0], [76.2, 3440.0], [76.3, 3440.0], [76.4, 3440.0], [76.5, 3440.0], [76.6, 3440.0], [76.7, 3551.0], [76.8, 3551.0], [76.9, 3551.0], [77.0, 3551.0], [77.1, 3551.0], [77.2, 3552.0], [77.3, 3552.0], [77.4, 3552.0], [77.5, 3552.0], [77.6, 3552.0], [77.7, 3562.0], [77.8, 3562.0], [77.9, 3562.0], [78.0, 3562.0], [78.1, 3562.0], [78.2, 3563.0], [78.3, 3563.0], [78.4, 3563.0], [78.5, 3563.0], [78.6, 3563.0], [78.7, 3565.0], [78.8, 3565.0], [78.9, 3565.0], [79.0, 3565.0], [79.1, 3565.0], [79.2, 3585.0], [79.3, 3585.0], [79.4, 3585.0], [79.5, 3585.0], [79.6, 3585.0], [79.7, 3586.0], [79.8, 3586.0], [79.9, 3586.0], [80.0, 3586.0], [80.1, 3586.0], [80.2, 3586.0], [80.3, 3590.0], [80.4, 3590.0], [80.5, 3590.0], [80.6, 3590.0], [80.7, 3590.0], [80.8, 3598.0], [80.9, 3598.0], [81.0, 3598.0], [81.1, 3598.0], [81.2, 3598.0], [81.3, 3603.0], [81.4, 3603.0], [81.5, 3603.0], [81.6, 3603.0], [81.7, 3603.0], [81.8, 3604.0], [81.9, 3604.0], [82.0, 3604.0], [82.1, 3604.0], [82.2, 3604.0], [82.3, 3609.0], [82.4, 3609.0], [82.5, 3609.0], [82.6, 3609.0], [82.7, 3609.0], [82.8, 3621.0], [82.9, 3621.0], [83.0, 3621.0], [83.1, 3621.0], [83.2, 3621.0], [83.3, 3647.0], [83.4, 3647.0], [83.5, 3647.0], [83.6, 3647.0], [83.7, 3647.0], [83.8, 3651.0], [83.9, 3651.0], [84.0, 3651.0], [84.1, 3651.0], [84.2, 3651.0], [84.3, 3655.0], [84.4, 3655.0], [84.5, 3655.0], [84.6, 3655.0], [84.7, 3655.0], [84.8, 3655.0], [84.9, 3655.0], [85.0, 3655.0], [85.1, 3655.0], [85.2, 3655.0], [85.3, 3659.0], [85.4, 3659.0], [85.5, 3659.0], [85.6, 3659.0], [85.7, 3659.0], [85.8, 3660.0], [85.9, 3660.0], [86.0, 3660.0], [86.1, 3660.0], [86.2, 3660.0], [86.3, 3665.0], [86.4, 3665.0], [86.5, 3665.0], [86.6, 3665.0], [86.7, 3665.0], [86.8, 3665.0], [86.9, 3669.0], [87.0, 3669.0], [87.1, 3669.0], [87.2, 3669.0], [87.3, 3669.0], [87.4, 3669.0], [87.5, 3669.0], [87.6, 3669.0], [87.7, 3669.0], [87.8, 3669.0], [87.9, 3672.0], [88.0, 3672.0], [88.1, 3672.0], [88.2, 3672.0], [88.3, 3672.0], [88.4, 3679.0], [88.5, 3679.0], [88.6, 3679.0], [88.7, 3679.0], [88.8, 3679.0], [88.9, 3687.0], [89.0, 3687.0], [89.1, 3687.0], [89.2, 3687.0], [89.3, 3687.0], [89.4, 3692.0], [89.5, 3692.0], [89.6, 3692.0], [89.7, 3692.0], [89.8, 3692.0], [89.9, 3694.0], [90.0, 3694.0], [90.1, 3694.0], [90.2, 3694.0], [90.3, 3694.0], [90.4, 3705.0], [90.5, 3705.0], [90.6, 3705.0], [90.7, 3705.0], [90.8, 3705.0], [90.9, 3706.0], [91.0, 3706.0], [91.1, 3706.0], [91.2, 3706.0], [91.3, 3706.0], [91.4, 3708.0], [91.5, 3708.0], [91.6, 3708.0], [91.7, 3708.0], [91.8, 3708.0], [91.9, 3711.0], [92.0, 3711.0], [92.1, 3711.0], [92.2, 3711.0], [92.3, 3711.0], [92.4, 3717.0], [92.5, 3717.0], [92.6, 3717.0], [92.7, 3717.0], [92.8, 3717.0], [92.9, 3720.0], [93.0, 3720.0], [93.1, 3720.0], [93.2, 3720.0], [93.3, 3720.0], [93.4, 3720.0], [93.5, 3733.0], [93.6, 3733.0], [93.7, 3733.0], [93.8, 3733.0], [93.9, 3733.0], [94.0, 3738.0], [94.1, 3738.0], [94.2, 3738.0], [94.3, 3738.0], [94.4, 3738.0], [94.5, 3745.0], [94.6, 3745.0], [94.7, 3745.0], [94.8, 3745.0], [94.9, 3745.0], [95.0, 3745.0], [95.1, 3745.0], [95.2, 3745.0], [95.3, 3745.0], [95.4, 3745.0], [95.5, 3752.0], [95.6, 3752.0], [95.7, 3752.0], [95.8, 3752.0], [95.9, 3752.0], [96.0, 3753.0], [96.1, 3753.0], [96.2, 3753.0], [96.3, 3753.0], [96.4, 3753.0], [96.5, 3755.0], [96.6, 3755.0], [96.7, 3755.0], [96.8, 3755.0], [96.9, 3755.0], [97.0, 3762.0], [97.1, 3762.0], [97.2, 3762.0], [97.3, 3762.0], [97.4, 3762.0], [97.5, 3769.0], [97.6, 3769.0], [97.7, 3769.0], [97.8, 3769.0], [97.9, 3769.0], [98.0, 3806.0], [98.1, 3806.0], [98.2, 3806.0], [98.3, 3806.0], [98.4, 3806.0], [98.5, 3857.0], [98.6, 3857.0], [98.7, 3857.0], [98.8, 3857.0], [98.9, 3857.0], [99.0, 4087.0], [99.1, 4087.0], [99.2, 4087.0], [99.3, 4087.0], [99.4, 4087.0], [99.5, 4151.0], [99.6, 4151.0], [99.7, 4151.0], [99.8, 4151.0], [99.9, 4151.0]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[0.0, 266.0], [0.1, 266.0], [0.2, 267.0], [0.3, 267.0], [0.4, 282.0], [0.5, 282.0], [0.6, 293.0], [0.7, 293.0], [0.8, 298.0], [0.9, 298.0], [1.0, 305.0], [1.1, 305.0], [1.2, 312.0], [1.3, 312.0], [1.4, 313.0], [1.5, 313.0], [1.6, 325.0], [1.7, 325.0], [1.8, 328.0], [1.9, 328.0], [2.0, 353.0], [2.1, 353.0], [2.2, 361.0], [2.3, 361.0], [2.4, 426.0], [2.5, 426.0], [2.6, 462.0], [2.7, 507.0], [2.8, 507.0], [2.9, 568.0], [3.0, 568.0], [3.1, 574.0], [3.2, 574.0], [3.3, 579.0], [3.4, 579.0], [3.5, 607.0], [3.6, 607.0], [3.7, 644.0], [3.8, 644.0], [3.9, 652.0], [4.0, 652.0], [4.1, 659.0], [4.2, 659.0], [4.3, 666.0], [4.4, 666.0], [4.5, 695.0], [4.6, 695.0], [4.7, 703.0], [4.8, 703.0], [4.9, 705.0], [5.0, 705.0], [5.1, 716.0], [5.2, 728.0], [5.3, 728.0], [5.4, 730.0], [5.5, 730.0], [5.6, 828.0], [5.7, 828.0], [5.8, 925.0], [5.9, 925.0], [6.0, 930.0], [6.1, 930.0], [6.2, 964.0], [6.3, 964.0], [6.4, 970.0], [6.5, 970.0], [6.6, 987.0], [6.7, 987.0], [6.8, 995.0], [6.9, 995.0], [7.0, 1003.0], [7.1, 1003.0], [7.2, 1010.0], [7.3, 1010.0], [7.4, 1014.0], [7.5, 1014.0], [7.6, 1041.0], [7.7, 1047.0], [7.8, 1047.0], [7.9, 1051.0], [8.0, 1051.0], [8.1, 1051.0], [8.2, 1051.0], [8.3, 1054.0], [8.4, 1054.0], [8.5, 1056.0], [8.6, 1056.0], [8.7, 1062.0], [8.8, 1062.0], [8.9, 1071.0], [9.0, 1071.0], [9.1, 1073.0], [9.2, 1073.0], [9.3, 1078.0], [9.4, 1078.0], [9.5, 1080.0], [9.6, 1080.0], [9.7, 1081.0], [9.8, 1081.0], [9.9, 1082.0], [10.0, 1086.0], [10.1, 1086.0], [10.2, 1090.0], [10.3, 1090.0], [10.4, 1091.0], [10.5, 1091.0], [10.6, 1093.0], [10.7, 1093.0], [10.8, 1094.0], [10.9, 1094.0], [11.0, 1099.0], [11.1, 1099.0], [11.2, 1101.0], [11.3, 1101.0], [11.4, 1103.0], [11.5, 1103.0], [11.6, 1104.0], [11.7, 1104.0], [11.8, 1106.0], [11.9, 1106.0], [12.0, 1107.0], [12.1, 1107.0], [12.2, 1109.0], [12.3, 1109.0], [12.4, 1111.0], [12.5, 1114.0], [12.6, 1114.0], [12.7, 1115.0], [12.8, 1115.0], [12.9, 1115.0], [13.0, 1115.0], [13.1, 1115.0], [13.2, 1115.0], [13.3, 1116.0], [13.4, 1116.0], [13.5, 1117.0], [13.6, 1117.0], [13.7, 1117.0], [13.8, 1117.0], [13.9, 1117.0], [14.0, 1117.0], [14.1, 1117.0], [14.2, 1117.0], [14.3, 1118.0], [14.4, 1118.0], [14.5, 1118.0], [14.6, 1118.0], [14.7, 1118.0], [14.8, 1118.0], [14.9, 1118.0], [15.0, 1119.0], [15.1, 1119.0], [15.2, 1119.0], [15.3, 1119.0], [15.4, 1119.0], [15.5, 1119.0], [15.6, 1119.0], [15.7, 1119.0], [15.8, 1119.0], [15.9, 1119.0], [16.0, 1120.0], [16.1, 1120.0], [16.2, 1120.0], [16.3, 1120.0], [16.4, 1123.0], [16.5, 1123.0], [16.6, 1123.0], [16.7, 1123.0], [16.8, 1123.0], [16.9, 1123.0], [17.0, 1123.0], [17.1, 1123.0], [17.2, 1125.0], [17.3, 1125.0], [17.4, 1125.0], [17.5, 1126.0], [17.6, 1126.0], [17.7, 1126.0], [17.8, 1126.0], [17.9, 1126.0], [18.0, 1126.0], [18.1, 1127.0], [18.2, 1127.0], [18.3, 1128.0], [18.4, 1128.0], [18.5, 1129.0], [18.6, 1129.0], [18.7, 1129.0], [18.8, 1129.0], [18.9, 1129.0], [19.0, 1129.0], [19.1, 1130.0], [19.2, 1130.0], [19.3, 1130.0], [19.4, 1130.0], [19.5, 1130.0], [19.6, 1130.0], [19.7, 1130.0], [19.8, 1130.0], [19.9, 1130.0], [20.0, 1130.0], [20.1, 1130.0], [20.2, 1130.0], [20.3, 1130.0], [20.4, 1131.0], [20.5, 1131.0], [20.6, 1131.0], [20.7, 1131.0], [20.8, 1131.0], [20.9, 1131.0], [21.0, 1131.0], [21.1, 1131.0], [21.2, 1131.0], [21.3, 1131.0], [21.4, 1131.0], [21.5, 1131.0], [21.6, 1131.0], [21.7, 1131.0], [21.8, 1131.0], [21.9, 1131.0], [22.0, 1131.0], [22.1, 1131.0], [22.2, 1131.0], [22.3, 1131.0], [22.4, 1132.0], [22.5, 1132.0], [22.6, 1132.0], [22.7, 1133.0], [22.8, 1133.0], [22.9, 1133.0], [23.0, 1133.0], [23.1, 1134.0], [23.2, 1134.0], [23.3, 1134.0], [23.4, 1134.0], [23.5, 1134.0], [23.6, 1134.0], [23.7, 1134.0], [23.8, 1134.0], [23.9, 1134.0], [24.0, 1134.0], [24.1, 1134.0], [24.2, 1134.0], [24.3, 1134.0], [24.4, 1134.0], [24.5, 1135.0], [24.6, 1135.0], [24.7, 1135.0], [24.8, 1135.0], [24.9, 1135.0], [25.0, 1135.0], [25.1, 1135.0], [25.2, 1136.0], [25.3, 1136.0], [25.4, 1136.0], [25.5, 1136.0], [25.6, 1136.0], [25.7, 1136.0], [25.8, 1136.0], [25.9, 1136.0], [26.0, 1136.0], [26.1, 1136.0], [26.2, 1136.0], [26.3, 1136.0], [26.4, 1136.0], [26.5, 1136.0], [26.6, 1137.0], [26.7, 1137.0], [26.8, 1137.0], [26.9, 1137.0], [27.0, 1137.0], [27.1, 1137.0], [27.2, 1138.0], [27.3, 1138.0], [27.4, 1138.0], [27.5, 1138.0], [27.6, 1138.0], [27.7, 1138.0], [27.8, 1138.0], [27.9, 1138.0], [28.0, 1138.0], [28.1, 1138.0], [28.2, 1138.0], [28.3, 1139.0], [28.4, 1139.0], [28.5, 1139.0], [28.6, 1139.0], [28.7, 1139.0], [28.8, 1139.0], [28.9, 1139.0], [29.0, 1139.0], [29.1, 1139.0], [29.2, 1139.0], [29.3, 1139.0], [29.4, 1139.0], [29.5, 1140.0], [29.6, 1140.0], [29.7, 1140.0], [29.8, 1140.0], [29.9, 1140.0], [30.0, 1140.0], [30.1, 1140.0], [30.2, 1140.0], [30.3, 1140.0], [30.4, 1140.0], [30.5, 1140.0], [30.6, 1141.0], [30.7, 1141.0], [30.8, 1141.0], [30.9, 1141.0], [31.0, 1141.0], [31.1, 1141.0], [31.2, 1141.0], [31.3, 1141.0], [31.4, 1141.0], [31.5, 1141.0], [31.6, 1141.0], [31.7, 1141.0], [31.8, 1141.0], [31.9, 1141.0], [32.0, 1141.0], [32.1, 1141.0], [32.2, 1141.0], [32.3, 1141.0], [32.4, 1141.0], [32.5, 1142.0], [32.6, 1142.0], [32.7, 1142.0], [32.8, 1142.0], [32.9, 1142.0], [33.0, 1142.0], [33.1, 1142.0], [33.2, 1142.0], [33.3, 1143.0], [33.4, 1143.0], [33.5, 1143.0], [33.6, 1143.0], [33.7, 1143.0], [33.8, 1143.0], [33.9, 1143.0], [34.0, 1143.0], [34.1, 1143.0], [34.2, 1143.0], [34.3, 1143.0], [34.4, 1143.0], [34.5, 1144.0], [34.6, 1144.0], [34.7, 1144.0], [34.8, 1144.0], [34.9, 1144.0], [35.0, 1144.0], [35.1, 1144.0], [35.2, 1144.0], [35.3, 1144.0], [35.4, 1144.0], [35.5, 1144.0], [35.6, 1144.0], [35.7, 1144.0], [35.8, 1144.0], [35.9, 1144.0], [36.0, 1145.0], [36.1, 1145.0], [36.2, 1145.0], [36.3, 1145.0], [36.4, 1145.0], [36.5, 1145.0], [36.6, 1145.0], [36.7, 1145.0], [36.8, 1145.0], [36.9, 1145.0], [37.0, 1145.0], [37.1, 1145.0], [37.2, 1145.0], [37.3, 1145.0], [37.4, 1146.0], [37.5, 1146.0], [37.6, 1146.0], [37.7, 1146.0], [37.8, 1146.0], [37.9, 1146.0], [38.0, 1146.0], [38.1, 1146.0], [38.2, 1146.0], [38.3, 1147.0], [38.4, 1147.0], [38.5, 1147.0], [38.6, 1147.0], [38.7, 1147.0], [38.8, 1147.0], [38.9, 1147.0], [39.0, 1147.0], [39.1, 1147.0], [39.2, 1147.0], [39.3, 1147.0], [39.4, 1147.0], [39.5, 1147.0], [39.6, 1147.0], [39.7, 1147.0], [39.8, 1147.0], [39.9, 1147.0], [40.0, 1147.0], [40.1, 1147.0], [40.2, 1147.0], [40.3, 1147.0], [40.4, 1147.0], [40.5, 1147.0], [40.6, 1147.0], [40.7, 1147.0], [40.8, 1147.0], [40.9, 1147.0], [41.0, 1148.0], [41.1, 1148.0], [41.2, 1148.0], [41.3, 1148.0], [41.4, 1148.0], [41.5, 1148.0], [41.6, 1148.0], [41.7, 1148.0], [41.8, 1148.0], [41.9, 1148.0], [42.0, 1148.0], [42.1, 1148.0], [42.2, 1148.0], [42.3, 1148.0], [42.4, 1148.0], [42.5, 1148.0], [42.6, 1148.0], [42.7, 1148.0], [42.8, 1148.0], [42.9, 1148.0], [43.0, 1148.0], [43.1, 1148.0], [43.2, 1148.0], [43.3, 1148.0], [43.4, 1148.0], [43.5, 1148.0], [43.6, 1148.0], [43.7, 1148.0], [43.8, 1148.0], [43.9, 1148.0], [44.0, 1148.0], [44.1, 1149.0], [44.2, 1149.0], [44.3, 1149.0], [44.4, 1149.0], [44.5, 1149.0], [44.6, 1149.0], [44.7, 1149.0], [44.8, 1149.0], [44.9, 1149.0], [45.0, 1149.0], [45.1, 1149.0], [45.2, 1149.0], [45.3, 1149.0], [45.4, 1150.0], [45.5, 1150.0], [45.6, 1150.0], [45.7, 1150.0], [45.8, 1150.0], [45.9, 1150.0], [46.0, 1150.0], [46.1, 1150.0], [46.2, 1150.0], [46.3, 1150.0], [46.4, 1150.0], [46.5, 1150.0], [46.6, 1150.0], [46.7, 1150.0], [46.8, 1150.0], [46.9, 1150.0], [47.0, 1151.0], [47.1, 1151.0], [47.2, 1151.0], [47.3, 1151.0], [47.4, 1151.0], [47.5, 1151.0], [47.6, 1151.0], [47.7, 1151.0], [47.8, 1151.0], [47.9, 1151.0], [48.0, 1151.0], [48.1, 1152.0], [48.2, 1152.0], [48.3, 1152.0], [48.4, 1152.0], [48.5, 1152.0], [48.6, 1152.0], [48.7, 1152.0], [48.8, 1152.0], [48.9, 1152.0], [49.0, 1152.0], [49.1, 1152.0], [49.2, 1152.0], [49.3, 1152.0], [49.4, 1152.0], [49.5, 1152.0], [49.6, 1152.0], [49.7, 1152.0], [49.8, 1152.0], [49.9, 1153.0], [50.0, 1153.0], [50.1, 1153.0], [50.2, 1153.0], [50.3, 1153.0], [50.4, 1153.0], [50.5, 1153.0], [50.6, 1154.0], [50.7, 1154.0], [50.8, 1154.0], [50.9, 1154.0], [51.0, 1154.0], [51.1, 1154.0], [51.2, 1154.0], [51.3, 1154.0], [51.4, 1154.0], [51.5, 1154.0], [51.6, 1154.0], [51.7, 1154.0], [51.8, 1154.0], [51.9, 1154.0], [52.0, 1154.0], [52.1, 1154.0], [52.2, 1154.0], [52.3, 1154.0], [52.4, 1155.0], [52.5, 1155.0], [52.6, 1155.0], [52.7, 1155.0], [52.8, 1155.0], [52.9, 1155.0], [53.0, 1155.0], [53.1, 1155.0], [53.2, 1155.0], [53.3, 1155.0], [53.4, 1155.0], [53.5, 1155.0], [53.6, 1155.0], [53.7, 1157.0], [53.8, 1157.0], [53.9, 1157.0], [54.0, 1157.0], [54.1, 1157.0], [54.2, 1157.0], [54.3, 1157.0], [54.4, 1157.0], [54.5, 1157.0], [54.6, 1157.0], [54.7, 1157.0], [54.8, 1157.0], [54.9, 1157.0], [55.0, 1158.0], [55.1, 1158.0], [55.2, 1158.0], [55.3, 1158.0], [55.4, 1158.0], [55.5, 1158.0], [55.6, 1158.0], [55.7, 1158.0], [55.8, 1158.0], [55.9, 1158.0], [56.0, 1158.0], [56.1, 1158.0], [56.2, 1158.0], [56.3, 1158.0], [56.4, 1159.0], [56.5, 1159.0], [56.6, 1159.0], [56.7, 1159.0], [56.8, 1159.0], [56.9, 1159.0], [57.0, 1159.0], [57.1, 1159.0], [57.2, 1159.0], [57.3, 1159.0], [57.4, 1159.0], [57.5, 1160.0], [57.6, 1160.0], [57.7, 1160.0], [57.8, 1160.0], [57.9, 1160.0], [58.0, 1160.0], [58.1, 1160.0], [58.2, 1160.0], [58.3, 1160.0], [58.4, 1160.0], [58.5, 1160.0], [58.6, 1160.0], [58.7, 1160.0], [58.8, 1160.0], [58.9, 1160.0], [59.0, 1160.0], [59.1, 1161.0], [59.2, 1161.0], [59.3, 1161.0], [59.4, 1161.0], [59.5, 1161.0], [59.6, 1161.0], [59.7, 1161.0], [59.8, 1161.0], [59.9, 1161.0], [60.0, 1161.0], [60.1, 1161.0], [60.2, 1161.0], [60.3, 1161.0], [60.4, 1162.0], [60.5, 1162.0], [60.6, 1162.0], [60.7, 1162.0], [60.8, 1162.0], [60.9, 1162.0], [61.0, 1162.0], [61.1, 1162.0], [61.2, 1162.0], [61.3, 1162.0], [61.4, 1162.0], [61.5, 1162.0], [61.6, 1162.0], [61.7, 1162.0], [61.8, 1162.0], [61.9, 1162.0], [62.0, 1162.0], [62.1, 1162.0], [62.2, 1163.0], [62.3, 1163.0], [62.4, 1163.0], [62.5, 1163.0], [62.6, 1163.0], [62.7, 1163.0], [62.8, 1163.0], [62.9, 1163.0], [63.0, 1163.0], [63.1, 1163.0], [63.2, 1163.0], [63.3, 1163.0], [63.4, 1163.0], [63.5, 1164.0], [63.6, 1164.0], [63.7, 1164.0], [63.8, 1164.0], [63.9, 1164.0], [64.0, 1164.0], [64.1, 1164.0], [64.2, 1164.0], [64.3, 1164.0], [64.4, 1164.0], [64.5, 1164.0], [64.6, 1164.0], [64.7, 1165.0], [64.8, 1165.0], [64.9, 1165.0], [65.0, 1165.0], [65.1, 1165.0], [65.2, 1165.0], [65.3, 1165.0], [65.4, 1165.0], [65.5, 1165.0], [65.6, 1165.0], [65.7, 1165.0], [65.8, 1165.0], [65.9, 1165.0], [66.0, 1166.0], [66.1, 1166.0], [66.2, 1166.0], [66.3, 1166.0], [66.4, 1166.0], [66.5, 1166.0], [66.6, 1166.0], [66.7, 1166.0], [66.8, 1166.0], [66.9, 1166.0], [67.0, 1166.0], [67.1, 1166.0], [67.2, 1166.0], [67.3, 1166.0], [67.4, 1166.0], [67.5, 1167.0], [67.6, 1167.0], [67.7, 1167.0], [67.8, 1167.0], [67.9, 1167.0], [68.0, 1167.0], [68.1, 1167.0], [68.2, 1167.0], [68.3, 1167.0], [68.4, 1167.0], [68.5, 1167.0], [68.6, 1167.0], [68.7, 1167.0], [68.8, 1167.0], [68.9, 1167.0], [69.0, 1167.0], [69.1, 1167.0], [69.2, 1167.0], [69.3, 1168.0], [69.4, 1168.0], [69.5, 1168.0], [69.6, 1168.0], [69.7, 1168.0], [69.8, 1168.0], [69.9, 1168.0], [70.0, 1168.0], [70.1, 1168.0], [70.2, 1168.0], [70.3, 1168.0], [70.4, 1168.0], [70.5, 1168.0], [70.6, 1169.0], [70.7, 1169.0], [70.8, 1169.0], [70.9, 1169.0], [71.0, 1169.0], [71.1, 1169.0], [71.2, 1169.0], [71.3, 1169.0], [71.4, 1169.0], [71.5, 1169.0], [71.6, 1170.0], [71.7, 1170.0], [71.8, 1170.0], [71.9, 1170.0], [72.0, 1170.0], [72.1, 1170.0], [72.2, 1170.0], [72.3, 1170.0], [72.4, 1170.0], [72.5, 1170.0], [72.6, 1170.0], [72.7, 1170.0], [72.8, 1170.0], [72.9, 1170.0], [73.0, 1170.0], [73.1, 1171.0], [73.2, 1171.0], [73.3, 1171.0], [73.4, 1171.0], [73.5, 1171.0], [73.6, 1171.0], [73.7, 1171.0], [73.8, 1171.0], [73.9, 1171.0], [74.0, 1171.0], [74.1, 1171.0], [74.2, 1171.0], [74.3, 1171.0], [74.4, 1171.0], [74.5, 1172.0], [74.6, 1172.0], [74.7, 1172.0], [74.8, 1172.0], [74.9, 1172.0], [75.0, 1172.0], [75.1, 1172.0], [75.2, 1173.0], [75.3, 1173.0], [75.4, 1173.0], [75.5, 1173.0], [75.6, 1173.0], [75.7, 1173.0], [75.8, 1173.0], [75.9, 1173.0], [76.0, 1173.0], [76.1, 1173.0], [76.2, 1174.0], [76.3, 1174.0], [76.4, 1174.0], [76.5, 1174.0], [76.6, 1175.0], [76.7, 1175.0], [76.8, 1175.0], [76.9, 1175.0], [77.0, 1175.0], [77.1, 1175.0], [77.2, 1175.0], [77.3, 1175.0], [77.4, 1176.0], [77.5, 1176.0], [77.6, 1176.0], [77.7, 1177.0], [77.8, 1177.0], [77.9, 1177.0], [78.0, 1177.0], [78.1, 1177.0], [78.2, 1177.0], [78.3, 1177.0], [78.4, 1177.0], [78.5, 1178.0], [78.6, 1178.0], [78.7, 1178.0], [78.8, 1178.0], [78.9, 1178.0], [79.0, 1178.0], [79.1, 1178.0], [79.2, 1178.0], [79.3, 1178.0], [79.4, 1178.0], [79.5, 1178.0], [79.6, 1178.0], [79.7, 1179.0], [79.8, 1179.0], [79.9, 1179.0], [80.0, 1179.0], [80.1, 1179.0], [80.2, 1179.0], [80.3, 1179.0], [80.4, 1180.0], [80.5, 1180.0], [80.6, 1180.0], [80.7, 1180.0], [80.8, 1180.0], [80.9, 1180.0], [81.0, 1180.0], [81.1, 1180.0], [81.2, 1180.0], [81.3, 1180.0], [81.4, 1180.0], [81.5, 1180.0], [81.6, 1180.0], [81.7, 1180.0], [81.8, 1182.0], [81.9, 1182.0], [82.0, 1182.0], [82.1, 1182.0], [82.2, 1182.0], [82.3, 1182.0], [82.4, 1182.0], [82.5, 1182.0], [82.6, 1182.0], [82.7, 1182.0], [82.8, 1182.0], [82.9, 1182.0], [83.0, 1182.0], [83.1, 1182.0], [83.2, 1182.0], [83.3, 1183.0], [83.4, 1183.0], [83.5, 1183.0], [83.6, 1183.0], [83.7, 1183.0], [83.8, 1183.0], [83.9, 1184.0], [84.0, 1184.0], [84.1, 1184.0], [84.2, 1184.0], [84.3, 1185.0], [84.4, 1185.0], [84.5, 1185.0], [84.6, 1185.0], [84.7, 1185.0], [84.8, 1185.0], [84.9, 1186.0], [85.0, 1186.0], [85.1, 1186.0], [85.2, 1187.0], [85.3, 1187.0], [85.4, 1187.0], [85.5, 1187.0], [85.6, 1188.0], [85.7, 1188.0], [85.8, 1189.0], [85.9, 1189.0], [86.0, 1189.0], [86.1, 1189.0], [86.2, 1190.0], [86.3, 1190.0], [86.4, 1190.0], [86.5, 1190.0], [86.6, 1190.0], [86.7, 1190.0], [86.8, 1191.0], [86.9, 1191.0], [87.0, 1191.0], [87.1, 1191.0], [87.2, 1192.0], [87.3, 1192.0], [87.4, 1192.0], [87.5, 1192.0], [87.6, 1193.0], [87.7, 1193.0], [87.8, 1193.0], [87.9, 1193.0], [88.0, 1193.0], [88.1, 1193.0], [88.2, 1193.0], [88.3, 1194.0], [88.4, 1194.0], [88.5, 1195.0], [88.6, 1195.0], [88.7, 1195.0], [88.8, 1195.0], [88.9, 1196.0], [89.0, 1196.0], [89.1, 1196.0], [89.2, 1196.0], [89.3, 1198.0], [89.4, 1198.0], [89.5, 1198.0], [89.6, 1198.0], [89.7, 1198.0], [89.8, 1198.0], [89.9, 1198.0], [90.0, 1198.0], [90.1, 1198.0], [90.2, 1199.0], [90.3, 1199.0], [90.4, 1200.0], [90.5, 1200.0], [90.6, 1200.0], [90.7, 1200.0], [90.8, 1202.0], [90.9, 1202.0], [91.0, 1203.0], [91.1, 1203.0], [91.2, 1203.0], [91.3, 1203.0], [91.4, 1205.0], [91.5, 1205.0], [91.6, 1206.0], [91.7, 1206.0], [91.8, 1207.0], [91.9, 1207.0], [92.0, 1207.0], [92.1, 1207.0], [92.2, 1209.0], [92.3, 1209.0], [92.4, 1210.0], [92.5, 1210.0], [92.6, 1211.0], [92.7, 1212.0], [92.8, 1212.0], [92.9, 1212.0], [93.0, 1212.0], [93.1, 1212.0], [93.2, 1212.0], [93.3, 1213.0], [93.4, 1213.0], [93.5, 1214.0], [93.6, 1214.0], [93.7, 1215.0], [93.8, 1215.0], [93.9, 1215.0], [94.0, 1215.0], [94.1, 1222.0], [94.2, 1222.0], [94.3, 1224.0], [94.4, 1224.0], [94.5, 1226.0], [94.6, 1226.0], [94.7, 1226.0], [94.8, 1226.0], [94.9, 1227.0], [95.0, 1227.0], [95.1, 1231.0], [95.2, 1232.0], [95.3, 1232.0], [95.4, 1234.0], [95.5, 1234.0], [95.6, 1237.0], [95.7, 1237.0], [95.8, 1240.0], [95.9, 1240.0], [96.0, 1241.0], [96.1, 1241.0], [96.2, 1242.0], [96.3, 1242.0], [96.4, 1246.0], [96.5, 1246.0], [96.6, 1252.0], [96.7, 1252.0], [96.8, 1255.0], [96.9, 1255.0], [97.0, 1258.0], [97.1, 1258.0], [97.2, 1259.0], [97.3, 1259.0], [97.4, 1260.0], [97.5, 1260.0], [97.6, 1261.0], [97.7, 1261.0], [97.8, 1261.0], [97.9, 1262.0], [98.0, 1262.0], [98.1, 1263.0], [98.2, 1263.0], [98.3, 1267.0], [98.4, 1267.0], [98.5, 1270.0], [98.6, 1270.0], [98.7, 1271.0], [98.8, 1271.0], [98.9, 1272.0], [99.0, 1272.0], [99.1, 1273.0], [99.2, 1273.0], [99.3, 1274.0], [99.4, 1274.0], [99.5, 1274.0], [99.6, 1274.0], [99.7, 1276.0], [99.8, 1276.0], [99.9, 1293.0], [100.0, 1293.0]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 446.0, "series": [{"data": [[0.0, 8.0], [300.0, 101.0], [600.0, 162.0], [700.0, 47.0], [200.0, 34.0], [100.0, 29.0], [400.0, 303.0], [800.0, 11.0], [500.0, 446.0]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[700.0, 1.0], [800.0, 2.0], [900.0, 2.0], [1000.0, 1.0], [1100.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2200.0, 2.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 1.0], [2800.0, 46.0], [2700.0, 5.0], [2900.0, 61.0], [3000.0, 7.0], [3100.0, 3.0], [3200.0, 3.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 9.0], [3600.0, 18.0], [3700.0, 15.0], [3800.0, 2.0], [4000.0, 1.0], [4100.0, 1.0]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1100.0, 412.0], [300.0, 7.0], [600.0, 6.0], [1200.0, 50.0], [700.0, 5.0], [200.0, 5.0], [400.0, 2.0], [800.0, 1.0], [900.0, 6.0], [500.0, 4.0], [1000.0, 22.0]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 189.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1175.0, "series": [{"data": [[0.0, 494.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1175.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 189.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.321739130434777, "minX": 1.57214538E12, "maxY": 9.75062656641604, "series": [{"data": [[1.5721455E12, 9.738764044943816], [1.57214544E12, 9.75062656641604], [1.57214556E12, 9.651162790697674], [1.57214538E12, 9.321739130434777]], "isOverall": false, "label": "ThreadGroup", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57214556E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 170.5, "minX": 1.0, "maxY": 3116.8079096045185, "series": [{"data": [[1.0, 400.0], [2.0, 170.5], [4.0, 180.16666666666669], [8.0, 421.8181818181818], [9.0, 427.0], [5.0, 277.0833333333333], [10.0, 525.0754536771731], [3.0, 173.58333333333331], [6.0, 291.46153846153845], [7.0, 343.33333333333337]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[9.61963190184048, 505.38825591586306]], "isOverall": false, "label": "Users with local encryption-Aggregated", "isController": false}, {"data": [[2.0, 1342.5], [4.0, 1473.5], [8.0, 2058.6666666666665], [1.0, 2230.0], [9.0, 2672.0], [5.0, 1768.5], [10.0, 3116.8079096045185], [3.0, 1285.3333333333333], [6.0, 1859.0], [7.0, 1923.0]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[9.522842639593906, 2984.1269035533005]], "isOverall": false, "label": "Users with PG PGP Encryption-Aggregated", "isController": false}, {"data": [[1.0, 305.0], [2.0, 599.8], [4.0, 570.75], [8.0, 856.8333333333334], [9.0, 1046.25], [5.0, 573.8333333333334], [10.0, 1158.1635220125793], [3.0, 474.66666666666663], [6.0, 719.4], [7.0, 751.0]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}, {"data": [[9.617307692307694, 1118.7519230769233]], "isOverall": false, "label": "Users with TCP encryption-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 346.15, "minX": 1.57214538E12, "maxY": 2575495.4, "series": [{"data": [[1.5721455E12, 1489045.4666666666], [1.57214544E12, 2575495.4], [1.57214556E12, 774726.7], [1.57214538E12, 1732072.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5721455E12, 835.2666666666667], [1.57214544E12, 1988.0333333333333], [1.57214556E12, 346.15], [1.57214538E12, 1485.4166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57214556E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 468.72173913043486, "minX": 1.57214538E12, "maxY": 3106.338235294119, "series": [{"data": [[1.57214544E12, 542.6378091872797], [1.57214538E12, 468.72173913043486]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.5721455E12, 3106.338235294119], [1.57214556E12, 2919.705426356589]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.5721455E12, 1157.732638888889], [1.57214544E12, 1070.3620689655172]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57214556E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 450.00000000000006, "minX": 1.57214538E12, "maxY": 3103.7647058823536, "series": [{"data": [[1.57214544E12, 514.4363957597167], [1.57214538E12, 450.00000000000006]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.5721455E12, 3103.7647058823536], [1.57214556E12, 2917.945736434109]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.5721455E12, 1152.8923611111118], [1.57214544E12, 1066.8750000000002]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57214556E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.3321554770318018, "minX": 1.57214538E12, "maxY": 1.0294117647058827, "series": [{"data": [[1.57214544E12, 0.3321554770318018], [1.57214538E12, 0.5165217391304346]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.5721455E12, 1.0294117647058827], [1.57214556E12, 0.7131782945736433]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.5721455E12, 0.5763888888888892], [1.57214544E12, 0.6939655172413793]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57214556E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 88.0, "minX": 1.57214538E12, "maxY": 4151.0, "series": [{"data": [[1.5721455E12, 4087.0], [1.57214544E12, 1276.0], [1.57214556E12, 4151.0], [1.57214538E12, 829.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5721455E12, 731.0], [1.57214544E12, 219.0], [1.57214556E12, 1853.0], [1.57214538E12, 88.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5721455E12, 3587.2], [1.57214544E12, 1168.0], [1.57214556E12, 3017.0], [1.57214538E12, 606.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5721455E12, 3784.9100000000003], [1.57214544E12, 1207.04], [1.57214556E12, 4009.3999999999946], [1.57214538E12, 780.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5721455E12, 3705.15], [1.57214544E12, 1180.1], [1.57214556E12, 3378.0], [1.57214538E12, 650.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57214556E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 497.0, "minX": 1.0, "maxY": 3524.5, "series": [{"data": [[2.0, 2960.0], [8.0, 1148.0], [9.0, 1159.0], [10.0, 1149.5], [3.0, 2913.0], [14.0, 594.0], [15.0, 548.5], [4.0, 2921.5], [16.0, 586.5], [1.0, 3524.5], [17.0, 515.0], [18.0, 538.5], [19.0, 516.0], [20.0, 507.0], [5.0, 2898.5], [21.0, 497.0], [22.0, 514.5], [6.0, 1175.0], [7.0, 1158.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 476.0, "minX": 1.0, "maxY": 3522.0, "series": [{"data": [[2.0, 2958.5], [8.0, 1144.0], [9.0, 1154.0], [10.0, 1146.0], [3.0, 2912.0], [14.0, 570.5], [15.0, 540.5], [4.0, 2919.5], [16.0, 559.0], [1.0, 3522.0], [17.0, 495.5], [18.0, 521.5], [19.0, 504.0], [20.0, 489.0], [5.0, 2897.0], [21.0, 476.0], [22.0, 499.0], [6.0, 1172.5], [7.0, 1155.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9833333333333334, "minX": 1.57214538E12, "maxY": 13.3, "series": [{"data": [[1.5721455E12, 5.933333333333334], [1.57214544E12, 13.3], [1.57214556E12, 1.9833333333333334], [1.57214538E12, 9.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57214556E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.57214538E12, "maxY": 13.3, "series": [{"data": [[1.5721455E12, 5.933333333333334], [1.57214544E12, 13.3], [1.57214556E12, 2.15], [1.57214538E12, 9.583333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57214556E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.57214538E12, "maxY": 9.583333333333334, "series": [{"data": [[1.5721455E12, 1.1333333333333333], [1.57214556E12, 2.15]], "isOverall": false, "label": "Users with PG PGP Encryption-success", "isController": false}, {"data": [[1.57214544E12, 9.433333333333334], [1.57214538E12, 9.583333333333334]], "isOverall": false, "label": "Users with local encryption-success", "isController": false}, {"data": [[1.5721455E12, 4.8], [1.57214544E12, 3.8666666666666667]], "isOverall": false, "label": "Users with TCP encryption-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57214556E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.57214538E12, "maxY": 13.3, "series": [{"data": [[1.5721455E12, 5.933333333333334], [1.57214544E12, 13.3], [1.57214556E12, 2.15], [1.57214538E12, 9.583333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57214556E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

