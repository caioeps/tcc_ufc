/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 5007.0, "series": [{"data": [[0.0, 15.0], [0.1, 15.0], [0.2, 16.0], [0.3, 16.0], [0.4, 17.0], [0.5, 18.0], [0.6, 18.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 18.0], [1.1, 18.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 21.0], [2.0, 21.0], [2.1, 22.0], [2.2, 22.0], [2.3, 22.0], [2.4, 23.0], [2.5, 24.0], [2.6, 24.0], [2.7, 24.0], [2.8, 25.0], [2.9, 25.0], [3.0, 26.0], [3.1, 26.0], [3.2, 27.0], [3.3, 27.0], [3.4, 27.0], [3.5, 27.0], [3.6, 27.0], [3.7, 27.0], [3.8, 28.0], [3.9, 28.0], [4.0, 28.0], [4.1, 28.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 31.0], [5.0, 31.0], [5.1, 31.0], [5.2, 32.0], [5.3, 33.0], [5.4, 34.0], [5.5, 34.0], [5.6, 35.0], [5.7, 35.0], [5.8, 36.0], [5.9, 37.0], [6.0, 38.0], [6.1, 39.0], [6.2, 39.0], [6.3, 40.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 42.0], [6.8, 42.0], [6.9, 43.0], [7.0, 43.0], [7.1, 43.0], [7.2, 43.0], [7.3, 44.0], [7.4, 45.0], [7.5, 45.0], [7.6, 46.0], [7.7, 46.0], [7.8, 47.0], [7.9, 47.0], [8.0, 50.0], [8.1, 50.0], [8.2, 50.0], [8.3, 51.0], [8.4, 52.0], [8.5, 52.0], [8.6, 54.0], [8.7, 54.0], [8.8, 55.0], [8.9, 55.0], [9.0, 55.0], [9.1, 56.0], [9.2, 57.0], [9.3, 58.0], [9.4, 59.0], [9.5, 60.0], [9.6, 60.0], [9.7, 61.0], [9.8, 61.0], [9.9, 62.0], [10.0, 62.0], [10.1, 63.0], [10.2, 64.0], [10.3, 64.0], [10.4, 66.0], [10.5, 68.0], [10.6, 69.0], [10.7, 72.0], [10.8, 73.0], [10.9, 73.0], [11.0, 75.0], [11.1, 75.0], [11.2, 75.0], [11.3, 78.0], [11.4, 78.0], [11.5, 79.0], [11.6, 80.0], [11.7, 81.0], [11.8, 82.0], [11.9, 84.0], [12.0, 84.0], [12.1, 84.0], [12.2, 86.0], [12.3, 88.0], [12.4, 89.0], [12.5, 93.0], [12.6, 93.0], [12.7, 101.0], [12.8, 102.0], [12.9, 103.0], [13.0, 107.0], [13.1, 114.0], [13.2, 116.0], [13.3, 119.0], [13.4, 119.0], [13.5, 121.0], [13.6, 122.0], [13.7, 125.0], [13.8, 126.0], [13.9, 129.0], [14.0, 134.0], [14.1, 137.0], [14.2, 139.0], [14.3, 140.0], [14.4, 145.0], [14.5, 149.0], [14.6, 153.0], [14.7, 153.0], [14.8, 155.0], [14.9, 162.0], [15.0, 165.0], [15.1, 173.0], [15.2, 188.0], [15.3, 190.0], [15.4, 194.0], [15.5, 197.0], [15.6, 200.0], [15.7, 203.0], [15.8, 208.0], [15.9, 209.0], [16.0, 211.0], [16.1, 211.0], [16.2, 220.0], [16.3, 226.0], [16.4, 229.0], [16.5, 232.0], [16.6, 242.0], [16.7, 244.0], [16.8, 247.0], [16.9, 251.0], [17.0, 274.0], [17.1, 280.0], [17.2, 288.0], [17.3, 292.0], [17.4, 300.0], [17.5, 303.0], [17.6, 303.0], [17.7, 320.0], [17.8, 321.0], [17.9, 325.0], [18.0, 329.0], [18.1, 329.0], [18.2, 330.0], [18.3, 340.0], [18.4, 341.0], [18.5, 345.0], [18.6, 348.0], [18.7, 348.0], [18.8, 350.0], [18.9, 357.0], [19.0, 358.0], [19.1, 361.0], [19.2, 363.0], [19.3, 373.0], [19.4, 374.0], [19.5, 376.0], [19.6, 379.0], [19.7, 380.0], [19.8, 381.0], [19.9, 383.0], [20.0, 383.0], [20.1, 384.0], [20.2, 385.0], [20.3, 386.0], [20.4, 387.0], [20.5, 387.0], [20.6, 387.0], [20.7, 388.0], [20.8, 388.0], [20.9, 390.0], [21.0, 391.0], [21.1, 392.0], [21.2, 392.0], [21.3, 394.0], [21.4, 395.0], [21.5, 395.0], [21.6, 396.0], [21.7, 396.0], [21.8, 397.0], [21.9, 398.0], [22.0, 398.0], [22.1, 398.0], [22.2, 398.0], [22.3, 398.0], [22.4, 399.0], [22.5, 400.0], [22.6, 400.0], [22.7, 400.0], [22.8, 400.0], [22.9, 401.0], [23.0, 401.0], [23.1, 402.0], [23.2, 402.0], [23.3, 402.0], [23.4, 403.0], [23.5, 403.0], [23.6, 403.0], [23.7, 404.0], [23.8, 404.0], [23.9, 405.0], [24.0, 405.0], [24.1, 406.0], [24.2, 406.0], [24.3, 407.0], [24.4, 408.0], [24.5, 408.0], [24.6, 409.0], [24.7, 409.0], [24.8, 410.0], [24.9, 410.0], [25.0, 410.0], [25.1, 411.0], [25.2, 411.0], [25.3, 412.0], [25.4, 412.0], [25.5, 412.0], [25.6, 413.0], [25.7, 413.0], [25.8, 413.0], [25.9, 416.0], [26.0, 416.0], [26.1, 416.0], [26.2, 416.0], [26.3, 416.0], [26.4, 416.0], [26.5, 416.0], [26.6, 416.0], [26.7, 416.0], [26.8, 417.0], [26.9, 417.0], [27.0, 417.0], [27.1, 418.0], [27.2, 418.0], [27.3, 418.0], [27.4, 419.0], [27.5, 419.0], [27.6, 419.0], [27.7, 419.0], [27.8, 420.0], [27.9, 420.0], [28.0, 420.0], [28.1, 421.0], [28.2, 421.0], [28.3, 421.0], [28.4, 422.0], [28.5, 422.0], [28.6, 423.0], [28.7, 426.0], [28.8, 426.0], [28.9, 427.0], [29.0, 427.0], [29.1, 427.0], [29.2, 428.0], [29.3, 428.0], [29.4, 428.0], [29.5, 429.0], [29.6, 429.0], [29.7, 429.0], [29.8, 430.0], [29.9, 430.0], [30.0, 430.0], [30.1, 431.0], [30.2, 431.0], [30.3, 432.0], [30.4, 432.0], [30.5, 433.0], [30.6, 433.0], [30.7, 433.0], [30.8, 433.0], [30.9, 434.0], [31.0, 434.0], [31.1, 434.0], [31.2, 435.0], [31.3, 435.0], [31.4, 436.0], [31.5, 436.0], [31.6, 436.0], [31.7, 436.0], [31.8, 436.0], [31.9, 437.0], [32.0, 437.0], [32.1, 437.0], [32.2, 438.0], [32.3, 438.0], [32.4, 439.0], [32.5, 439.0], [32.6, 439.0], [32.7, 439.0], [32.8, 439.0], [32.9, 440.0], [33.0, 440.0], [33.1, 441.0], [33.2, 441.0], [33.3, 441.0], [33.4, 442.0], [33.5, 442.0], [33.6, 442.0], [33.7, 442.0], [33.8, 442.0], [33.9, 443.0], [34.0, 443.0], [34.1, 444.0], [34.2, 445.0], [34.3, 445.0], [34.4, 445.0], [34.5, 446.0], [34.6, 446.0], [34.7, 446.0], [34.8, 447.0], [34.9, 447.0], [35.0, 449.0], [35.1, 450.0], [35.2, 450.0], [35.3, 450.0], [35.4, 450.0], [35.5, 450.0], [35.6, 451.0], [35.7, 451.0], [35.8, 451.0], [35.9, 452.0], [36.0, 452.0], [36.1, 452.0], [36.2, 452.0], [36.3, 453.0], [36.4, 453.0], [36.5, 454.0], [36.6, 454.0], [36.7, 455.0], [36.8, 455.0], [36.9, 456.0], [37.0, 456.0], [37.1, 456.0], [37.2, 456.0], [37.3, 456.0], [37.4, 457.0], [37.5, 457.0], [37.6, 457.0], [37.7, 458.0], [37.8, 458.0], [37.9, 459.0], [38.0, 459.0], [38.1, 460.0], [38.2, 460.0], [38.3, 460.0], [38.4, 461.0], [38.5, 461.0], [38.6, 461.0], [38.7, 461.0], [38.8, 462.0], [38.9, 462.0], [39.0, 462.0], [39.1, 462.0], [39.2, 463.0], [39.3, 463.0], [39.4, 463.0], [39.5, 463.0], [39.6, 463.0], [39.7, 463.0], [39.8, 464.0], [39.9, 464.0], [40.0, 464.0], [40.1, 464.0], [40.2, 464.0], [40.3, 465.0], [40.4, 465.0], [40.5, 466.0], [40.6, 466.0], [40.7, 466.0], [40.8, 466.0], [40.9, 466.0], [41.0, 466.0], [41.1, 467.0], [41.2, 467.0], [41.3, 467.0], [41.4, 467.0], [41.5, 467.0], [41.6, 468.0], [41.7, 468.0], [41.8, 468.0], [41.9, 468.0], [42.0, 469.0], [42.1, 470.0], [42.2, 470.0], [42.3, 470.0], [42.4, 470.0], [42.5, 471.0], [42.6, 471.0], [42.7, 471.0], [42.8, 471.0], [42.9, 471.0], [43.0, 472.0], [43.1, 473.0], [43.2, 473.0], [43.3, 473.0], [43.4, 473.0], [43.5, 474.0], [43.6, 475.0], [43.7, 475.0], [43.8, 476.0], [43.9, 476.0], [44.0, 476.0], [44.1, 476.0], [44.2, 476.0], [44.3, 477.0], [44.4, 477.0], [44.5, 477.0], [44.6, 477.0], [44.7, 478.0], [44.8, 478.0], [44.9, 478.0], [45.0, 478.0], [45.1, 478.0], [45.2, 479.0], [45.3, 479.0], [45.4, 479.0], [45.5, 480.0], [45.6, 480.0], [45.7, 480.0], [45.8, 480.0], [45.9, 481.0], [46.0, 481.0], [46.1, 481.0], [46.2, 481.0], [46.3, 482.0], [46.4, 482.0], [46.5, 482.0], [46.6, 483.0], [46.7, 483.0], [46.8, 483.0], [46.9, 484.0], [47.0, 484.0], [47.1, 484.0], [47.2, 485.0], [47.3, 485.0], [47.4, 485.0], [47.5, 486.0], [47.6, 486.0], [47.7, 486.0], [47.8, 487.0], [47.9, 487.0], [48.0, 487.0], [48.1, 487.0], [48.2, 487.0], [48.3, 487.0], [48.4, 488.0], [48.5, 488.0], [48.6, 488.0], [48.7, 489.0], [48.8, 489.0], [48.9, 489.0], [49.0, 489.0], [49.1, 489.0], [49.2, 489.0], [49.3, 490.0], [49.4, 490.0], [49.5, 490.0], [49.6, 490.0], [49.7, 490.0], [49.8, 491.0], [49.9, 491.0], [50.0, 491.0], [50.1, 491.0], [50.2, 492.0], [50.3, 492.0], [50.4, 492.0], [50.5, 492.0], [50.6, 493.0], [50.7, 493.0], [50.8, 493.0], [50.9, 493.0], [51.0, 493.0], [51.1, 493.0], [51.2, 494.0], [51.3, 494.0], [51.4, 494.0], [51.5, 494.0], [51.6, 494.0], [51.7, 495.0], [51.8, 495.0], [51.9, 495.0], [52.0, 495.0], [52.1, 495.0], [52.2, 495.0], [52.3, 495.0], [52.4, 495.0], [52.5, 496.0], [52.6, 496.0], [52.7, 496.0], [52.8, 496.0], [52.9, 497.0], [53.0, 497.0], [53.1, 498.0], [53.2, 498.0], [53.3, 499.0], [53.4, 499.0], [53.5, 499.0], [53.6, 500.0], [53.7, 500.0], [53.8, 500.0], [53.9, 500.0], [54.0, 500.0], [54.1, 501.0], [54.2, 501.0], [54.3, 502.0], [54.4, 502.0], [54.5, 502.0], [54.6, 502.0], [54.7, 502.0], [54.8, 502.0], [54.9, 502.0], [55.0, 503.0], [55.1, 503.0], [55.2, 503.0], [55.3, 503.0], [55.4, 504.0], [55.5, 504.0], [55.6, 504.0], [55.7, 505.0], [55.8, 505.0], [55.9, 505.0], [56.0, 506.0], [56.1, 507.0], [56.2, 507.0], [56.3, 507.0], [56.4, 507.0], [56.5, 508.0], [56.6, 508.0], [56.7, 508.0], [56.8, 509.0], [56.9, 510.0], [57.0, 510.0], [57.1, 510.0], [57.2, 510.0], [57.3, 510.0], [57.4, 510.0], [57.5, 510.0], [57.6, 510.0], [57.7, 510.0], [57.8, 511.0], [57.9, 511.0], [58.0, 511.0], [58.1, 512.0], [58.2, 512.0], [58.3, 512.0], [58.4, 513.0], [58.5, 513.0], [58.6, 513.0], [58.7, 514.0], [58.8, 514.0], [58.9, 514.0], [59.0, 514.0], [59.1, 515.0], [59.2, 515.0], [59.3, 515.0], [59.4, 516.0], [59.5, 516.0], [59.6, 516.0], [59.7, 516.0], [59.8, 516.0], [59.9, 517.0], [60.0, 517.0], [60.1, 517.0], [60.2, 517.0], [60.3, 517.0], [60.4, 518.0], [60.5, 519.0], [60.6, 519.0], [60.7, 520.0], [60.8, 520.0], [60.9, 520.0], [61.0, 520.0], [61.1, 520.0], [61.2, 520.0], [61.3, 521.0], [61.4, 521.0], [61.5, 522.0], [61.6, 522.0], [61.7, 522.0], [61.8, 522.0], [61.9, 523.0], [62.0, 523.0], [62.1, 524.0], [62.2, 524.0], [62.3, 524.0], [62.4, 524.0], [62.5, 524.0], [62.6, 524.0], [62.7, 525.0], [62.8, 525.0], [62.9, 525.0], [63.0, 525.0], [63.1, 526.0], [63.2, 526.0], [63.3, 526.0], [63.4, 526.0], [63.5, 526.0], [63.6, 527.0], [63.7, 527.0], [63.8, 527.0], [63.9, 527.0], [64.0, 527.0], [64.1, 527.0], [64.2, 527.0], [64.3, 527.0], [64.4, 527.0], [64.5, 528.0], [64.6, 528.0], [64.7, 528.0], [64.8, 529.0], [64.9, 529.0], [65.0, 529.0], [65.1, 530.0], [65.2, 531.0], [65.3, 531.0], [65.4, 531.0], [65.5, 531.0], [65.6, 532.0], [65.7, 532.0], [65.8, 532.0], [65.9, 532.0], [66.0, 532.0], [66.1, 532.0], [66.2, 532.0], [66.3, 533.0], [66.4, 533.0], [66.5, 533.0], [66.6, 533.0], [66.7, 533.0], [66.8, 534.0], [66.9, 534.0], [67.0, 535.0], [67.1, 535.0], [67.2, 535.0], [67.3, 536.0], [67.4, 536.0], [67.5, 536.0], [67.6, 536.0], [67.7, 536.0], [67.8, 536.0], [67.9, 537.0], [68.0, 537.0], [68.1, 537.0], [68.2, 537.0], [68.3, 537.0], [68.4, 538.0], [68.5, 538.0], [68.6, 538.0], [68.7, 538.0], [68.8, 538.0], [68.9, 538.0], [69.0, 539.0], [69.1, 539.0], [69.2, 540.0], [69.3, 540.0], [69.4, 541.0], [69.5, 541.0], [69.6, 541.0], [69.7, 542.0], [69.8, 542.0], [69.9, 542.0], [70.0, 543.0], [70.1, 543.0], [70.2, 543.0], [70.3, 543.0], [70.4, 543.0], [70.5, 543.0], [70.6, 543.0], [70.7, 543.0], [70.8, 544.0], [70.9, 544.0], [71.0, 544.0], [71.1, 544.0], [71.2, 544.0], [71.3, 544.0], [71.4, 544.0], [71.5, 545.0], [71.6, 545.0], [71.7, 545.0], [71.8, 545.0], [71.9, 546.0], [72.0, 546.0], [72.1, 547.0], [72.2, 547.0], [72.3, 547.0], [72.4, 547.0], [72.5, 547.0], [72.6, 547.0], [72.7, 547.0], [72.8, 548.0], [72.9, 548.0], [73.0, 548.0], [73.1, 548.0], [73.2, 548.0], [73.3, 549.0], [73.4, 549.0], [73.5, 549.0], [73.6, 549.0], [73.7, 549.0], [73.8, 549.0], [73.9, 550.0], [74.0, 550.0], [74.1, 550.0], [74.2, 550.0], [74.3, 551.0], [74.4, 551.0], [74.5, 551.0], [74.6, 551.0], [74.7, 551.0], [74.8, 551.0], [74.9, 552.0], [75.0, 552.0], [75.1, 552.0], [75.2, 552.0], [75.3, 552.0], [75.4, 553.0], [75.5, 553.0], [75.6, 553.0], [75.7, 554.0], [75.8, 554.0], [75.9, 554.0], [76.0, 554.0], [76.1, 554.0], [76.2, 555.0], [76.3, 555.0], [76.4, 555.0], [76.5, 555.0], [76.6, 555.0], [76.7, 556.0], [76.8, 556.0], [76.9, 556.0], [77.0, 557.0], [77.1, 557.0], [77.2, 557.0], [77.3, 557.0], [77.4, 558.0], [77.5, 558.0], [77.6, 558.0], [77.7, 559.0], [77.8, 559.0], [77.9, 560.0], [78.0, 560.0], [78.1, 560.0], [78.2, 560.0], [78.3, 561.0], [78.4, 561.0], [78.5, 561.0], [78.6, 562.0], [78.7, 562.0], [78.8, 562.0], [78.9, 562.0], [79.0, 562.0], [79.1, 562.0], [79.2, 562.0], [79.3, 562.0], [79.4, 563.0], [79.5, 563.0], [79.6, 563.0], [79.7, 563.0], [79.8, 564.0], [79.9, 564.0], [80.0, 564.0], [80.1, 565.0], [80.2, 565.0], [80.3, 565.0], [80.4, 565.0], [80.5, 565.0], [80.6, 566.0], [80.7, 566.0], [80.8, 566.0], [80.9, 567.0], [81.0, 567.0], [81.1, 567.0], [81.2, 567.0], [81.3, 567.0], [81.4, 567.0], [81.5, 568.0], [81.6, 568.0], [81.7, 568.0], [81.8, 569.0], [81.9, 569.0], [82.0, 569.0], [82.1, 569.0], [82.2, 569.0], [82.3, 569.0], [82.4, 569.0], [82.5, 570.0], [82.6, 570.0], [82.7, 570.0], [82.8, 571.0], [82.9, 571.0], [83.0, 571.0], [83.1, 571.0], [83.2, 571.0], [83.3, 572.0], [83.4, 572.0], [83.5, 572.0], [83.6, 572.0], [83.7, 573.0], [83.8, 573.0], [83.9, 574.0], [84.0, 574.0], [84.1, 574.0], [84.2, 575.0], [84.3, 575.0], [84.4, 575.0], [84.5, 575.0], [84.6, 575.0], [84.7, 575.0], [84.8, 576.0], [84.9, 576.0], [85.0, 576.0], [85.1, 576.0], [85.2, 577.0], [85.3, 577.0], [85.4, 577.0], [85.5, 578.0], [85.6, 578.0], [85.7, 578.0], [85.8, 578.0], [85.9, 579.0], [86.0, 579.0], [86.1, 579.0], [86.2, 579.0], [86.3, 579.0], [86.4, 580.0], [86.5, 580.0], [86.6, 580.0], [86.7, 580.0], [86.8, 580.0], [86.9, 580.0], [87.0, 581.0], [87.1, 581.0], [87.2, 581.0], [87.3, 581.0], [87.4, 581.0], [87.5, 581.0], [87.6, 582.0], [87.7, 582.0], [87.8, 582.0], [87.9, 582.0], [88.0, 582.0], [88.1, 583.0], [88.2, 583.0], [88.3, 583.0], [88.4, 584.0], [88.5, 584.0], [88.6, 584.0], [88.7, 584.0], [88.8, 585.0], [88.9, 585.0], [89.0, 585.0], [89.1, 586.0], [89.2, 587.0], [89.3, 587.0], [89.4, 587.0], [89.5, 587.0], [89.6, 587.0], [89.7, 588.0], [89.8, 588.0], [89.9, 588.0], [90.0, 589.0], [90.1, 589.0], [90.2, 589.0], [90.3, 590.0], [90.4, 590.0], [90.5, 590.0], [90.6, 590.0], [90.7, 590.0], [90.8, 591.0], [90.9, 591.0], [91.0, 591.0], [91.1, 592.0], [91.2, 592.0], [91.3, 592.0], [91.4, 592.0], [91.5, 593.0], [91.6, 593.0], [91.7, 593.0], [91.8, 594.0], [91.9, 595.0], [92.0, 595.0], [92.1, 595.0], [92.2, 595.0], [92.3, 596.0], [92.4, 596.0], [92.5, 596.0], [92.6, 596.0], [92.7, 597.0], [92.8, 597.0], [92.9, 597.0], [93.0, 597.0], [93.1, 599.0], [93.2, 599.0], [93.3, 599.0], [93.4, 601.0], [93.5, 601.0], [93.6, 601.0], [93.7, 601.0], [93.8, 601.0], [93.9, 602.0], [94.0, 603.0], [94.1, 603.0], [94.2, 603.0], [94.3, 605.0], [94.4, 605.0], [94.5, 605.0], [94.6, 605.0], [94.7, 606.0], [94.8, 606.0], [94.9, 607.0], [95.0, 607.0], [95.1, 607.0], [95.2, 609.0], [95.3, 611.0], [95.4, 611.0], [95.5, 612.0], [95.6, 612.0], [95.7, 612.0], [95.8, 613.0], [95.9, 613.0], [96.0, 614.0], [96.1, 615.0], [96.2, 615.0], [96.3, 615.0], [96.4, 617.0], [96.5, 617.0], [96.6, 618.0], [96.7, 618.0], [96.8, 619.0], [96.9, 619.0], [97.0, 620.0], [97.1, 625.0], [97.2, 627.0], [97.3, 628.0], [97.4, 628.0], [97.5, 629.0], [97.6, 630.0], [97.7, 631.0], [97.8, 632.0], [97.9, 635.0], [98.0, 636.0], [98.1, 640.0], [98.2, 641.0], [98.3, 642.0], [98.4, 644.0], [98.5, 646.0], [98.6, 648.0], [98.7, 649.0], [98.8, 651.0], [98.9, 651.0], [99.0, 656.0], [99.1, 666.0], [99.2, 677.0], [99.3, 685.0], [99.4, 687.0], [99.5, 692.0], [99.6, 697.0], [99.7, 703.0], [99.8, 703.0], [99.9, 722.0]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[0.0, 130.0], [0.1, 130.0], [0.2, 135.0], [0.3, 177.0], [0.4, 182.0], [0.5, 196.0], [0.6, 196.0], [0.7, 204.0], [0.8, 210.0], [0.9, 214.0], [1.0, 216.0], [1.1, 217.0], [1.2, 218.0], [1.3, 226.0], [1.4, 241.0], [1.5, 242.0], [1.6, 254.0], [1.7, 258.0], [1.8, 270.0], [1.9, 272.0], [2.0, 286.0], [2.1, 300.0], [2.2, 305.0], [2.3, 307.0], [2.4, 315.0], [2.5, 330.0], [2.6, 331.0], [2.7, 331.0], [2.8, 333.0], [2.9, 334.0], [3.0, 337.0], [3.1, 344.0], [3.2, 348.0], [3.3, 351.0], [3.4, 351.0], [3.5, 356.0], [3.6, 364.0], [3.7, 382.0], [3.8, 382.0], [3.9, 385.0], [4.0, 392.0], [4.1, 400.0], [4.2, 408.0], [4.3, 410.0], [4.4, 413.0], [4.5, 418.0], [4.6, 421.0], [4.7, 424.0], [4.8, 424.0], [4.9, 424.0], [5.0, 428.0], [5.1, 429.0], [5.2, 435.0], [5.3, 435.0], [5.4, 439.0], [5.5, 444.0], [5.6, 445.0], [5.7, 448.0], [5.8, 451.0], [5.9, 452.0], [6.0, 453.0], [6.1, 456.0], [6.2, 456.0], [6.3, 458.0], [6.4, 459.0], [6.5, 460.0], [6.6, 460.0], [6.7, 462.0], [6.8, 462.0], [6.9, 463.0], [7.0, 466.0], [7.1, 466.0], [7.2, 467.0], [7.3, 468.0], [7.4, 468.0], [7.5, 469.0], [7.6, 470.0], [7.7, 471.0], [7.8, 472.0], [7.9, 472.0], [8.0, 473.0], [8.1, 474.0], [8.2, 474.0], [8.3, 475.0], [8.4, 477.0], [8.5, 479.0], [8.6, 480.0], [8.7, 481.0], [8.8, 482.0], [8.9, 483.0], [9.0, 483.0], [9.1, 483.0], [9.2, 483.0], [9.3, 484.0], [9.4, 484.0], [9.5, 486.0], [9.6, 486.0], [9.7, 487.0], [9.8, 487.0], [9.9, 487.0], [10.0, 487.0], [10.1, 488.0], [10.2, 488.0], [10.3, 488.0], [10.4, 489.0], [10.5, 489.0], [10.6, 489.0], [10.7, 489.0], [10.8, 489.0], [10.9, 490.0], [11.0, 490.0], [11.1, 491.0], [11.2, 491.0], [11.3, 491.0], [11.4, 491.0], [11.5, 491.0], [11.6, 492.0], [11.7, 492.0], [11.8, 492.0], [11.9, 492.0], [12.0, 493.0], [12.1, 494.0], [12.2, 495.0], [12.3, 496.0], [12.4, 496.0], [12.5, 497.0], [12.6, 498.0], [12.7, 498.0], [12.8, 498.0], [12.9, 498.0], [13.0, 498.0], [13.1, 498.0], [13.2, 499.0], [13.3, 499.0], [13.4, 499.0], [13.5, 499.0], [13.6, 499.0], [13.7, 499.0], [13.8, 500.0], [13.9, 501.0], [14.0, 501.0], [14.1, 502.0], [14.2, 503.0], [14.3, 503.0], [14.4, 504.0], [14.5, 505.0], [14.6, 505.0], [14.7, 506.0], [14.8, 506.0], [14.9, 507.0], [15.0, 507.0], [15.1, 507.0], [15.2, 507.0], [15.3, 508.0], [15.4, 508.0], [15.5, 508.0], [15.6, 508.0], [15.7, 509.0], [15.8, 510.0], [15.9, 510.0], [16.0, 510.0], [16.1, 510.0], [16.2, 510.0], [16.3, 510.0], [16.4, 510.0], [16.5, 510.0], [16.6, 511.0], [16.7, 511.0], [16.8, 511.0], [16.9, 511.0], [17.0, 512.0], [17.1, 512.0], [17.2, 513.0], [17.3, 514.0], [17.4, 514.0], [17.5, 514.0], [17.6, 514.0], [17.7, 515.0], [17.8, 515.0], [17.9, 515.0], [18.0, 515.0], [18.1, 515.0], [18.2, 516.0], [18.3, 516.0], [18.4, 516.0], [18.5, 516.0], [18.6, 517.0], [18.7, 517.0], [18.8, 517.0], [18.9, 518.0], [19.0, 518.0], [19.1, 518.0], [19.2, 518.0], [19.3, 519.0], [19.4, 519.0], [19.5, 519.0], [19.6, 520.0], [19.7, 520.0], [19.8, 520.0], [19.9, 520.0], [20.0, 521.0], [20.1, 522.0], [20.2, 522.0], [20.3, 522.0], [20.4, 522.0], [20.5, 522.0], [20.6, 522.0], [20.7, 522.0], [20.8, 523.0], [20.9, 523.0], [21.0, 523.0], [21.1, 524.0], [21.2, 524.0], [21.3, 525.0], [21.4, 525.0], [21.5, 525.0], [21.6, 526.0], [21.7, 526.0], [21.8, 526.0], [21.9, 526.0], [22.0, 526.0], [22.1, 526.0], [22.2, 526.0], [22.3, 526.0], [22.4, 527.0], [22.5, 528.0], [22.6, 528.0], [22.7, 528.0], [22.8, 528.0], [22.9, 529.0], [23.0, 529.0], [23.1, 529.0], [23.2, 529.0], [23.3, 530.0], [23.4, 530.0], [23.5, 530.0], [23.6, 530.0], [23.7, 530.0], [23.8, 530.0], [23.9, 530.0], [24.0, 531.0], [24.1, 532.0], [24.2, 532.0], [24.3, 532.0], [24.4, 532.0], [24.5, 532.0], [24.6, 532.0], [24.7, 532.0], [24.8, 532.0], [24.9, 533.0], [25.0, 533.0], [25.1, 533.0], [25.2, 534.0], [25.3, 534.0], [25.4, 534.0], [25.5, 534.0], [25.6, 534.0], [25.7, 535.0], [25.8, 535.0], [25.9, 535.0], [26.0, 537.0], [26.1, 537.0], [26.2, 537.0], [26.3, 537.0], [26.4, 537.0], [26.5, 537.0], [26.6, 538.0], [26.7, 538.0], [26.8, 538.0], [26.9, 538.0], [27.0, 538.0], [27.1, 538.0], [27.2, 538.0], [27.3, 540.0], [27.4, 541.0], [27.5, 541.0], [27.6, 542.0], [27.7, 542.0], [27.8, 542.0], [27.9, 542.0], [28.0, 542.0], [28.1, 542.0], [28.2, 542.0], [28.3, 543.0], [28.4, 543.0], [28.5, 543.0], [28.6, 543.0], [28.7, 543.0], [28.8, 544.0], [28.9, 544.0], [29.0, 544.0], [29.1, 545.0], [29.2, 545.0], [29.3, 545.0], [29.4, 545.0], [29.5, 545.0], [29.6, 545.0], [29.7, 546.0], [29.8, 546.0], [29.9, 546.0], [30.0, 546.0], [30.1, 546.0], [30.2, 547.0], [30.3, 547.0], [30.4, 547.0], [30.5, 547.0], [30.6, 547.0], [30.7, 548.0], [30.8, 548.0], [30.9, 549.0], [31.0, 549.0], [31.1, 549.0], [31.2, 550.0], [31.3, 550.0], [31.4, 550.0], [31.5, 550.0], [31.6, 550.0], [31.7, 551.0], [31.8, 551.0], [31.9, 551.0], [32.0, 551.0], [32.1, 551.0], [32.2, 552.0], [32.3, 552.0], [32.4, 552.0], [32.5, 552.0], [32.6, 553.0], [32.7, 553.0], [32.8, 553.0], [32.9, 555.0], [33.0, 555.0], [33.1, 555.0], [33.2, 556.0], [33.3, 556.0], [33.4, 556.0], [33.5, 556.0], [33.6, 556.0], [33.7, 556.0], [33.8, 556.0], [33.9, 556.0], [34.0, 556.0], [34.1, 557.0], [34.2, 557.0], [34.3, 557.0], [34.4, 557.0], [34.5, 557.0], [34.6, 557.0], [34.7, 557.0], [34.8, 558.0], [34.9, 558.0], [35.0, 558.0], [35.1, 558.0], [35.2, 558.0], [35.3, 558.0], [35.4, 559.0], [35.5, 559.0], [35.6, 559.0], [35.7, 559.0], [35.8, 559.0], [35.9, 560.0], [36.0, 560.0], [36.1, 560.0], [36.2, 560.0], [36.3, 560.0], [36.4, 561.0], [36.5, 561.0], [36.6, 561.0], [36.7, 561.0], [36.8, 562.0], [36.9, 562.0], [37.0, 562.0], [37.1, 562.0], [37.2, 563.0], [37.3, 563.0], [37.4, 564.0], [37.5, 564.0], [37.6, 564.0], [37.7, 565.0], [37.8, 565.0], [37.9, 565.0], [38.0, 565.0], [38.1, 565.0], [38.2, 565.0], [38.3, 566.0], [38.4, 566.0], [38.5, 567.0], [38.6, 567.0], [38.7, 567.0], [38.8, 568.0], [38.9, 568.0], [39.0, 568.0], [39.1, 568.0], [39.2, 568.0], [39.3, 568.0], [39.4, 569.0], [39.5, 569.0], [39.6, 569.0], [39.7, 569.0], [39.8, 570.0], [39.9, 570.0], [40.0, 570.0], [40.1, 570.0], [40.2, 570.0], [40.3, 571.0], [40.4, 571.0], [40.5, 571.0], [40.6, 571.0], [40.7, 571.0], [40.8, 571.0], [40.9, 571.0], [41.0, 572.0], [41.1, 572.0], [41.2, 572.0], [41.3, 572.0], [41.4, 572.0], [41.5, 572.0], [41.6, 573.0], [41.7, 573.0], [41.8, 573.0], [41.9, 573.0], [42.0, 573.0], [42.1, 574.0], [42.2, 574.0], [42.3, 574.0], [42.4, 575.0], [42.5, 575.0], [42.6, 575.0], [42.7, 576.0], [42.8, 577.0], [42.9, 577.0], [43.0, 577.0], [43.1, 577.0], [43.2, 577.0], [43.3, 578.0], [43.4, 578.0], [43.5, 579.0], [43.6, 579.0], [43.7, 579.0], [43.8, 579.0], [43.9, 579.0], [44.0, 580.0], [44.1, 580.0], [44.2, 580.0], [44.3, 580.0], [44.4, 580.0], [44.5, 580.0], [44.6, 580.0], [44.7, 580.0], [44.8, 580.0], [44.9, 581.0], [45.0, 581.0], [45.1, 581.0], [45.2, 581.0], [45.3, 581.0], [45.4, 581.0], [45.5, 582.0], [45.6, 582.0], [45.7, 582.0], [45.8, 582.0], [45.9, 582.0], [46.0, 582.0], [46.1, 583.0], [46.2, 583.0], [46.3, 583.0], [46.4, 583.0], [46.5, 583.0], [46.6, 583.0], [46.7, 583.0], [46.8, 583.0], [46.9, 584.0], [47.0, 584.0], [47.1, 585.0], [47.2, 585.0], [47.3, 585.0], [47.4, 585.0], [47.5, 585.0], [47.6, 587.0], [47.7, 587.0], [47.8, 587.0], [47.9, 587.0], [48.0, 587.0], [48.1, 588.0], [48.2, 588.0], [48.3, 588.0], [48.4, 588.0], [48.5, 588.0], [48.6, 588.0], [48.7, 589.0], [48.8, 589.0], [48.9, 589.0], [49.0, 589.0], [49.1, 590.0], [49.2, 590.0], [49.3, 590.0], [49.4, 591.0], [49.5, 591.0], [49.6, 591.0], [49.7, 592.0], [49.8, 593.0], [49.9, 593.0], [50.0, 594.0], [50.1, 594.0], [50.2, 594.0], [50.3, 595.0], [50.4, 595.0], [50.5, 595.0], [50.6, 595.0], [50.7, 596.0], [50.8, 596.0], [50.9, 596.0], [51.0, 596.0], [51.1, 597.0], [51.2, 597.0], [51.3, 597.0], [51.4, 597.0], [51.5, 597.0], [51.6, 598.0], [51.7, 598.0], [51.8, 599.0], [51.9, 599.0], [52.0, 599.0], [52.1, 599.0], [52.2, 600.0], [52.3, 600.0], [52.4, 600.0], [52.5, 600.0], [52.6, 600.0], [52.7, 600.0], [52.8, 600.0], [52.9, 601.0], [53.0, 601.0], [53.1, 601.0], [53.2, 601.0], [53.3, 602.0], [53.4, 602.0], [53.5, 602.0], [53.6, 602.0], [53.7, 602.0], [53.8, 602.0], [53.9, 602.0], [54.0, 602.0], [54.1, 603.0], [54.2, 603.0], [54.3, 604.0], [54.4, 604.0], [54.5, 604.0], [54.6, 604.0], [54.7, 604.0], [54.8, 604.0], [54.9, 604.0], [55.0, 604.0], [55.1, 604.0], [55.2, 605.0], [55.3, 605.0], [55.4, 605.0], [55.5, 605.0], [55.6, 605.0], [55.7, 605.0], [55.8, 605.0], [55.9, 605.0], [56.0, 606.0], [56.1, 606.0], [56.2, 606.0], [56.3, 606.0], [56.4, 606.0], [56.5, 606.0], [56.6, 606.0], [56.7, 606.0], [56.8, 606.0], [56.9, 606.0], [57.0, 607.0], [57.1, 607.0], [57.2, 607.0], [57.3, 607.0], [57.4, 607.0], [57.5, 607.0], [57.6, 607.0], [57.7, 607.0], [57.8, 607.0], [57.9, 607.0], [58.0, 608.0], [58.1, 608.0], [58.2, 608.0], [58.3, 608.0], [58.4, 608.0], [58.5, 608.0], [58.6, 608.0], [58.7, 609.0], [58.8, 609.0], [58.9, 609.0], [59.0, 609.0], [59.1, 609.0], [59.2, 610.0], [59.3, 610.0], [59.4, 610.0], [59.5, 610.0], [59.6, 611.0], [59.7, 611.0], [59.8, 611.0], [59.9, 611.0], [60.0, 611.0], [60.1, 611.0], [60.2, 612.0], [60.3, 612.0], [60.4, 612.0], [60.5, 612.0], [60.6, 613.0], [60.7, 613.0], [60.8, 613.0], [60.9, 613.0], [61.0, 614.0], [61.1, 614.0], [61.2, 614.0], [61.3, 614.0], [61.4, 614.0], [61.5, 615.0], [61.6, 615.0], [61.7, 615.0], [61.8, 615.0], [61.9, 615.0], [62.0, 615.0], [62.1, 616.0], [62.2, 616.0], [62.3, 616.0], [62.4, 616.0], [62.5, 616.0], [62.6, 617.0], [62.7, 617.0], [62.8, 617.0], [62.9, 617.0], [63.0, 617.0], [63.1, 618.0], [63.2, 618.0], [63.3, 619.0], [63.4, 619.0], [63.5, 619.0], [63.6, 619.0], [63.7, 620.0], [63.8, 620.0], [63.9, 620.0], [64.0, 620.0], [64.1, 620.0], [64.2, 620.0], [64.3, 620.0], [64.4, 621.0], [64.5, 621.0], [64.6, 621.0], [64.7, 621.0], [64.8, 621.0], [64.9, 621.0], [65.0, 621.0], [65.1, 622.0], [65.2, 622.0], [65.3, 622.0], [65.4, 622.0], [65.5, 622.0], [65.6, 622.0], [65.7, 622.0], [65.8, 623.0], [65.9, 623.0], [66.0, 624.0], [66.1, 624.0], [66.2, 624.0], [66.3, 624.0], [66.4, 624.0], [66.5, 624.0], [66.6, 624.0], [66.7, 624.0], [66.8, 625.0], [66.9, 625.0], [67.0, 625.0], [67.1, 625.0], [67.2, 626.0], [67.3, 626.0], [67.4, 626.0], [67.5, 627.0], [67.6, 627.0], [67.7, 627.0], [67.8, 628.0], [67.9, 628.0], [68.0, 628.0], [68.1, 628.0], [68.2, 628.0], [68.3, 628.0], [68.4, 628.0], [68.5, 629.0], [68.6, 629.0], [68.7, 629.0], [68.8, 629.0], [68.9, 629.0], [69.0, 630.0], [69.1, 630.0], [69.2, 630.0], [69.3, 630.0], [69.4, 630.0], [69.5, 630.0], [69.6, 630.0], [69.7, 630.0], [69.8, 631.0], [69.9, 631.0], [70.0, 632.0], [70.1, 632.0], [70.2, 632.0], [70.3, 633.0], [70.4, 633.0], [70.5, 633.0], [70.6, 633.0], [70.7, 633.0], [70.8, 633.0], [70.9, 634.0], [71.0, 634.0], [71.1, 634.0], [71.2, 634.0], [71.3, 635.0], [71.4, 635.0], [71.5, 635.0], [71.6, 635.0], [71.7, 635.0], [71.8, 635.0], [71.9, 636.0], [72.0, 636.0], [72.1, 636.0], [72.2, 636.0], [72.3, 636.0], [72.4, 637.0], [72.5, 637.0], [72.6, 637.0], [72.7, 637.0], [72.8, 638.0], [72.9, 638.0], [73.0, 638.0], [73.1, 638.0], [73.2, 638.0], [73.3, 638.0], [73.4, 639.0], [73.5, 639.0], [73.6, 639.0], [73.7, 639.0], [73.8, 640.0], [73.9, 640.0], [74.0, 640.0], [74.1, 640.0], [74.2, 641.0], [74.3, 641.0], [74.4, 641.0], [74.5, 641.0], [74.6, 642.0], [74.7, 642.0], [74.8, 642.0], [74.9, 642.0], [75.0, 642.0], [75.1, 643.0], [75.2, 643.0], [75.3, 643.0], [75.4, 643.0], [75.5, 644.0], [75.6, 644.0], [75.7, 644.0], [75.8, 645.0], [75.9, 645.0], [76.0, 645.0], [76.1, 645.0], [76.2, 645.0], [76.3, 646.0], [76.4, 646.0], [76.5, 646.0], [76.6, 646.0], [76.7, 646.0], [76.8, 646.0], [76.9, 646.0], [77.0, 646.0], [77.1, 647.0], [77.2, 647.0], [77.3, 647.0], [77.4, 648.0], [77.5, 648.0], [77.6, 648.0], [77.7, 648.0], [77.8, 648.0], [77.9, 649.0], [78.0, 649.0], [78.1, 650.0], [78.2, 650.0], [78.3, 650.0], [78.4, 650.0], [78.5, 650.0], [78.6, 650.0], [78.7, 651.0], [78.8, 651.0], [78.9, 651.0], [79.0, 651.0], [79.1, 651.0], [79.2, 651.0], [79.3, 652.0], [79.4, 652.0], [79.5, 653.0], [79.6, 653.0], [79.7, 653.0], [79.8, 654.0], [79.9, 654.0], [80.0, 654.0], [80.1, 654.0], [80.2, 654.0], [80.3, 655.0], [80.4, 656.0], [80.5, 656.0], [80.6, 656.0], [80.7, 657.0], [80.8, 657.0], [80.9, 657.0], [81.0, 658.0], [81.1, 658.0], [81.2, 658.0], [81.3, 658.0], [81.4, 659.0], [81.5, 659.0], [81.6, 660.0], [81.7, 661.0], [81.8, 661.0], [81.9, 661.0], [82.0, 663.0], [82.1, 663.0], [82.2, 663.0], [82.3, 663.0], [82.4, 664.0], [82.5, 664.0], [82.6, 664.0], [82.7, 664.0], [82.8, 665.0], [82.9, 665.0], [83.0, 665.0], [83.1, 665.0], [83.2, 665.0], [83.3, 665.0], [83.4, 666.0], [83.5, 666.0], [83.6, 666.0], [83.7, 666.0], [83.8, 666.0], [83.9, 667.0], [84.0, 667.0], [84.1, 668.0], [84.2, 668.0], [84.3, 668.0], [84.4, 668.0], [84.5, 668.0], [84.6, 669.0], [84.7, 671.0], [84.8, 671.0], [84.9, 671.0], [85.0, 671.0], [85.1, 671.0], [85.2, 671.0], [85.3, 672.0], [85.4, 672.0], [85.5, 672.0], [85.6, 673.0], [85.7, 673.0], [85.8, 673.0], [85.9, 673.0], [86.0, 673.0], [86.1, 674.0], [86.2, 674.0], [86.3, 674.0], [86.4, 674.0], [86.5, 675.0], [86.6, 676.0], [86.7, 676.0], [86.8, 677.0], [86.9, 677.0], [87.0, 677.0], [87.1, 678.0], [87.2, 678.0], [87.3, 678.0], [87.4, 679.0], [87.5, 679.0], [87.6, 679.0], [87.7, 679.0], [87.8, 680.0], [87.9, 680.0], [88.0, 680.0], [88.1, 681.0], [88.2, 681.0], [88.3, 681.0], [88.4, 681.0], [88.5, 681.0], [88.6, 682.0], [88.7, 683.0], [88.8, 683.0], [88.9, 683.0], [89.0, 685.0], [89.1, 685.0], [89.2, 686.0], [89.3, 687.0], [89.4, 687.0], [89.5, 688.0], [89.6, 690.0], [89.7, 690.0], [89.8, 690.0], [89.9, 690.0], [90.0, 691.0], [90.1, 691.0], [90.2, 693.0], [90.3, 693.0], [90.4, 693.0], [90.5, 694.0], [90.6, 694.0], [90.7, 694.0], [90.8, 695.0], [90.9, 696.0], [91.0, 696.0], [91.1, 697.0], [91.2, 698.0], [91.3, 698.0], [91.4, 698.0], [91.5, 699.0], [91.6, 699.0], [91.7, 700.0], [91.8, 700.0], [91.9, 700.0], [92.0, 701.0], [92.1, 702.0], [92.2, 702.0], [92.3, 704.0], [92.4, 705.0], [92.5, 705.0], [92.6, 705.0], [92.7, 706.0], [92.8, 706.0], [92.9, 707.0], [93.0, 707.0], [93.1, 707.0], [93.2, 708.0], [93.3, 711.0], [93.4, 713.0], [93.5, 713.0], [93.6, 713.0], [93.7, 713.0], [93.8, 715.0], [93.9, 715.0], [94.0, 715.0], [94.1, 715.0], [94.2, 716.0], [94.3, 717.0], [94.4, 717.0], [94.5, 717.0], [94.6, 718.0], [94.7, 718.0], [94.8, 718.0], [94.9, 719.0], [95.0, 720.0], [95.1, 721.0], [95.2, 721.0], [95.3, 722.0], [95.4, 722.0], [95.5, 727.0], [95.6, 728.0], [95.7, 728.0], [95.8, 730.0], [95.9, 730.0], [96.0, 730.0], [96.1, 731.0], [96.2, 733.0], [96.3, 734.0], [96.4, 736.0], [96.5, 740.0], [96.6, 740.0], [96.7, 740.0], [96.8, 741.0], [96.9, 744.0], [97.0, 744.0], [97.1, 746.0], [97.2, 746.0], [97.3, 747.0], [97.4, 748.0], [97.5, 749.0], [97.6, 749.0], [97.7, 749.0], [97.8, 750.0], [97.9, 751.0], [98.0, 751.0], [98.1, 752.0], [98.2, 753.0], [98.3, 753.0], [98.4, 755.0], [98.5, 759.0], [98.6, 762.0], [98.7, 764.0], [98.8, 765.0], [98.9, 765.0], [99.0, 766.0], [99.1, 770.0], [99.2, 771.0], [99.3, 773.0], [99.4, 773.0], [99.5, 779.0], [99.6, 785.0], [99.7, 792.0], [99.8, 800.0], [99.9, 821.0], [100.0, 821.0]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[0.0, 29.0], [0.1, 29.0], [0.2, 29.0], [0.3, 37.0], [0.4, 37.0], [0.5, 37.0], [0.6, 39.0], [0.7, 39.0], [0.8, 40.0], [0.9, 40.0], [1.0, 40.0], [1.1, 43.0], [1.2, 43.0], [1.3, 48.0], [1.4, 48.0], [1.5, 48.0], [1.6, 50.0], [1.7, 50.0], [1.8, 53.0], [1.9, 53.0], [2.0, 53.0], [2.1, 59.0], [2.2, 59.0], [2.3, 64.0], [2.4, 64.0], [2.5, 64.0], [2.6, 84.0], [2.7, 84.0], [2.8, 84.0], [2.9, 97.0], [3.0, 97.0], [3.1, 105.0], [3.2, 105.0], [3.3, 105.0], [3.4, 106.0], [3.5, 106.0], [3.6, 107.0], [3.7, 107.0], [3.8, 107.0], [3.9, 112.0], [4.0, 112.0], [4.1, 114.0], [4.2, 114.0], [4.3, 114.0], [4.4, 117.0], [4.5, 117.0], [4.6, 124.0], [4.7, 124.0], [4.8, 124.0], [4.9, 131.0], [5.0, 131.0], [5.1, 131.0], [5.2, 132.0], [5.3, 132.0], [5.4, 135.0], [5.5, 135.0], [5.6, 135.0], [5.7, 150.0], [5.8, 150.0], [5.9, 180.0], [6.0, 180.0], [6.1, 180.0], [6.2, 199.0], [6.3, 199.0], [6.4, 202.0], [6.5, 202.0], [6.6, 202.0], [6.7, 208.0], [6.8, 208.0], [6.9, 246.0], [7.0, 246.0], [7.1, 246.0], [7.2, 284.0], [7.3, 284.0], [7.4, 330.0], [7.5, 330.0], [7.6, 330.0], [7.7, 343.0], [7.8, 343.0], [7.9, 343.0], [8.0, 347.0], [8.1, 347.0], [8.2, 350.0], [8.3, 350.0], [8.4, 350.0], [8.5, 366.0], [8.6, 366.0], [8.7, 477.0], [8.8, 477.0], [8.9, 477.0], [9.0, 501.0], [9.1, 501.0], [9.2, 542.0], [9.3, 542.0], [9.4, 542.0], [9.5, 555.0], [9.6, 555.0], [9.7, 561.0], [9.8, 561.0], [9.9, 561.0], [10.0, 571.0], [10.1, 571.0], [10.2, 571.0], [10.3, 576.0], [10.4, 576.0], [10.5, 576.0], [10.6, 576.0], [10.7, 576.0], [10.8, 618.0], [10.9, 618.0], [11.0, 625.0], [11.1, 625.0], [11.2, 625.0], [11.3, 659.0], [11.4, 659.0], [11.5, 668.0], [11.6, 668.0], [11.7, 668.0], [11.8, 690.0], [11.9, 690.0], [12.0, 719.0], [12.1, 719.0], [12.2, 719.0], [12.3, 736.0], [12.4, 736.0], [12.5, 736.0], [12.6, 736.0], [12.7, 736.0], [12.8, 751.0], [12.9, 751.0], [13.0, 751.0], [13.1, 758.0], [13.2, 758.0], [13.3, 759.0], [13.4, 759.0], [13.5, 759.0], [13.6, 768.0], [13.7, 768.0], [13.8, 788.0], [13.9, 788.0], [14.0, 788.0], [14.1, 802.0], [14.2, 802.0], [14.3, 813.0], [14.4, 813.0], [14.5, 813.0], [14.6, 814.0], [14.7, 814.0], [14.8, 819.0], [14.9, 819.0], [15.0, 819.0], [15.1, 819.0], [15.2, 819.0], [15.3, 819.0], [15.4, 838.0], [15.5, 838.0], [15.6, 841.0], [15.7, 841.0], [15.8, 841.0], [15.9, 844.0], [16.0, 844.0], [16.1, 867.0], [16.2, 867.0], [16.3, 867.0], [16.4, 868.0], [16.5, 868.0], [16.6, 870.0], [16.7, 870.0], [16.8, 870.0], [16.9, 875.0], [17.0, 875.0], [17.1, 876.0], [17.2, 876.0], [17.3, 876.0], [17.4, 890.0], [17.5, 890.0], [17.6, 890.0], [17.7, 892.0], [17.8, 892.0], [17.9, 897.0], [18.0, 897.0], [18.1, 897.0], [18.2, 900.0], [18.3, 900.0], [18.4, 902.0], [18.5, 902.0], [18.6, 902.0], [18.7, 905.0], [18.8, 905.0], [18.9, 911.0], [19.0, 911.0], [19.1, 911.0], [19.2, 922.0], [19.3, 922.0], [19.4, 922.0], [19.5, 922.0], [19.6, 922.0], [19.7, 927.0], [19.8, 927.0], [19.9, 928.0], [20.0, 928.0], [20.1, 928.0], [20.2, 931.0], [20.3, 931.0], [20.4, 931.0], [20.5, 931.0], [20.6, 931.0], [20.7, 937.0], [20.8, 937.0], [20.9, 937.0], [21.0, 940.0], [21.1, 940.0], [21.2, 940.0], [21.3, 940.0], [21.4, 940.0], [21.5, 948.0], [21.6, 948.0], [21.7, 949.0], [21.8, 949.0], [21.9, 949.0], [22.0, 951.0], [22.1, 951.0], [22.2, 966.0], [22.3, 966.0], [22.4, 966.0], [22.5, 967.0], [22.6, 967.0], [22.7, 967.0], [22.8, 969.0], [22.9, 969.0], [23.0, 971.0], [23.1, 971.0], [23.2, 971.0], [23.3, 972.0], [23.4, 972.0], [23.5, 975.0], [23.6, 975.0], [23.7, 975.0], [23.8, 976.0], [23.9, 976.0], [24.0, 977.0], [24.1, 977.0], [24.2, 977.0], [24.3, 986.0], [24.4, 986.0], [24.5, 986.0], [24.6, 986.0], [24.7, 986.0], [24.8, 987.0], [24.9, 987.0], [25.0, 990.0], [25.1, 990.0], [25.2, 990.0], [25.3, 991.0], [25.4, 991.0], [25.5, 991.0], [25.6, 999.0], [25.7, 999.0], [25.8, 1004.0], [25.9, 1004.0], [26.0, 1004.0], [26.1, 1019.0], [26.2, 1019.0], [26.3, 1020.0], [26.4, 1020.0], [26.5, 1020.0], [26.6, 1022.0], [26.7, 1022.0], [26.8, 1025.0], [26.9, 1025.0], [27.0, 1025.0], [27.1, 1025.0], [27.2, 1025.0], [27.3, 1027.0], [27.4, 1027.0], [27.5, 1027.0], [27.6, 1029.0], [27.7, 1029.0], [27.8, 1029.0], [27.9, 1034.0], [28.0, 1034.0], [28.1, 1037.0], [28.2, 1037.0], [28.3, 1037.0], [28.4, 1041.0], [28.5, 1041.0], [28.6, 1042.0], [28.7, 1042.0], [28.8, 1042.0], [28.9, 1042.0], [29.0, 1042.0], [29.1, 1045.0], [29.2, 1045.0], [29.3, 1045.0], [29.4, 1048.0], [29.5, 1048.0], [29.6, 1055.0], [29.7, 1055.0], [29.8, 1055.0], [29.9, 1063.0], [30.0, 1063.0], [30.1, 1063.0], [30.2, 1064.0], [30.3, 1064.0], [30.4, 1064.0], [30.5, 1064.0], [30.6, 1064.0], [30.7, 1064.0], [30.8, 1064.0], [30.9, 1067.0], [31.0, 1067.0], [31.1, 1067.0], [31.2, 1077.0], [31.3, 1077.0], [31.4, 1078.0], [31.5, 1078.0], [31.6, 1078.0], [31.7, 1082.0], [31.8, 1082.0], [31.9, 1084.0], [32.0, 1084.0], [32.1, 1084.0], [32.2, 1085.0], [32.3, 1085.0], [32.4, 1090.0], [32.5, 1090.0], [32.6, 1090.0], [32.7, 1091.0], [32.8, 1091.0], [32.9, 1091.0], [33.0, 1093.0], [33.1, 1093.0], [33.2, 1093.0], [33.3, 1093.0], [33.4, 1093.0], [33.5, 1101.0], [33.6, 1101.0], [33.7, 1120.0], [33.8, 1120.0], [33.9, 1120.0], [34.0, 1124.0], [34.1, 1124.0], [34.2, 1141.0], [34.3, 1141.0], [34.4, 1141.0], [34.5, 1152.0], [34.6, 1152.0], [34.7, 1154.0], [34.8, 1154.0], [34.9, 1154.0], [35.0, 1160.0], [35.1, 1160.0], [35.2, 1160.0], [35.3, 1160.0], [35.4, 1160.0], [35.5, 1162.0], [35.6, 1162.0], [35.7, 1162.0], [35.8, 1167.0], [35.9, 1167.0], [36.0, 1169.0], [36.1, 1169.0], [36.2, 1169.0], [36.3, 1171.0], [36.4, 1171.0], [36.5, 1172.0], [36.6, 1172.0], [36.7, 1172.0], [36.8, 1172.0], [36.9, 1172.0], [37.0, 1172.0], [37.1, 1172.0], [37.2, 1172.0], [37.3, 1173.0], [37.4, 1173.0], [37.5, 1175.0], [37.6, 1175.0], [37.7, 1175.0], [37.8, 1177.0], [37.9, 1177.0], [38.0, 1177.0], [38.1, 1178.0], [38.2, 1178.0], [38.3, 1184.0], [38.4, 1184.0], [38.5, 1184.0], [38.6, 1186.0], [38.7, 1186.0], [38.8, 1187.0], [38.9, 1187.0], [39.0, 1187.0], [39.1, 1202.0], [39.2, 1202.0], [39.3, 1206.0], [39.4, 1206.0], [39.5, 1206.0], [39.6, 1218.0], [39.7, 1218.0], [39.8, 1220.0], [39.9, 1220.0], [40.0, 1220.0], [40.1, 1221.0], [40.2, 1221.0], [40.3, 1221.0], [40.4, 1222.0], [40.5, 1222.0], [40.6, 1223.0], [40.7, 1223.0], [40.8, 1223.0], [40.9, 1245.0], [41.0, 1245.0], [41.1, 1246.0], [41.2, 1246.0], [41.3, 1246.0], [41.4, 1258.0], [41.5, 1258.0], [41.6, 1260.0], [41.7, 1260.0], [41.8, 1260.0], [41.9, 1260.0], [42.0, 1260.0], [42.1, 1260.0], [42.2, 1260.0], [42.3, 1260.0], [42.4, 1262.0], [42.5, 1262.0], [42.6, 1262.0], [42.7, 1264.0], [42.8, 1264.0], [42.9, 1267.0], [43.0, 1267.0], [43.1, 1267.0], [43.2, 1267.0], [43.3, 1267.0], [43.4, 1274.0], [43.5, 1274.0], [43.6, 1274.0], [43.7, 1277.0], [43.8, 1277.0], [43.9, 1283.0], [44.0, 1283.0], [44.1, 1283.0], [44.2, 1284.0], [44.3, 1284.0], [44.4, 1284.0], [44.5, 1284.0], [44.6, 1284.0], [44.7, 1290.0], [44.8, 1290.0], [44.9, 1290.0], [45.0, 1290.0], [45.1, 1290.0], [45.2, 1294.0], [45.3, 1294.0], [45.4, 1294.0], [45.5, 1296.0], [45.6, 1296.0], [45.7, 1296.0], [45.8, 1296.0], [45.9, 1296.0], [46.0, 1300.0], [46.1, 1300.0], [46.2, 1304.0], [46.3, 1304.0], [46.4, 1304.0], [46.5, 1307.0], [46.6, 1307.0], [46.7, 1308.0], [46.8, 1308.0], [46.9, 1308.0], [47.0, 1310.0], [47.1, 1310.0], [47.2, 1311.0], [47.3, 1311.0], [47.4, 1311.0], [47.5, 1314.0], [47.6, 1314.0], [47.7, 1314.0], [47.8, 1316.0], [47.9, 1316.0], [48.0, 1325.0], [48.1, 1325.0], [48.2, 1325.0], [48.3, 1333.0], [48.4, 1333.0], [48.5, 1335.0], [48.6, 1335.0], [48.7, 1335.0], [48.8, 1340.0], [48.9, 1340.0], [49.0, 1345.0], [49.1, 1345.0], [49.2, 1345.0], [49.3, 1348.0], [49.4, 1348.0], [49.5, 1352.0], [49.6, 1352.0], [49.7, 1352.0], [49.8, 1353.0], [49.9, 1353.0], [50.0, 1355.0], [50.1, 1355.0], [50.2, 1355.0], [50.3, 1372.0], [50.4, 1372.0], [50.5, 1372.0], [50.6, 1389.0], [50.7, 1389.0], [50.8, 1389.0], [50.9, 1389.0], [51.0, 1389.0], [51.1, 1394.0], [51.2, 1394.0], [51.3, 1398.0], [51.4, 1398.0], [51.5, 1398.0], [51.6, 1398.0], [51.7, 1398.0], [51.8, 1400.0], [51.9, 1400.0], [52.0, 1400.0], [52.1, 1402.0], [52.2, 1402.0], [52.3, 1413.0], [52.4, 1413.0], [52.5, 1413.0], [52.6, 1416.0], [52.7, 1416.0], [52.8, 1416.0], [52.9, 1418.0], [53.0, 1418.0], [53.1, 1435.0], [53.2, 1435.0], [53.3, 1435.0], [53.4, 1435.0], [53.5, 1435.0], [53.6, 1436.0], [53.7, 1436.0], [53.8, 1436.0], [53.9, 1443.0], [54.0, 1443.0], [54.1, 1445.0], [54.2, 1445.0], [54.3, 1445.0], [54.4, 1448.0], [54.5, 1448.0], [54.6, 1459.0], [54.7, 1459.0], [54.8, 1459.0], [54.9, 1465.0], [55.0, 1465.0], [55.1, 1465.0], [55.2, 1468.0], [55.3, 1468.0], [55.4, 1469.0], [55.5, 1469.0], [55.6, 1469.0], [55.7, 1469.0], [55.8, 1469.0], [55.9, 1484.0], [56.0, 1484.0], [56.1, 1484.0], [56.2, 1486.0], [56.3, 1486.0], [56.4, 1493.0], [56.5, 1493.0], [56.6, 1493.0], [56.7, 1498.0], [56.8, 1498.0], [56.9, 1499.0], [57.0, 1499.0], [57.1, 1499.0], [57.2, 1506.0], [57.3, 1506.0], [57.4, 1514.0], [57.5, 1514.0], [57.6, 1514.0], [57.7, 1527.0], [57.8, 1527.0], [57.9, 1527.0], [58.0, 1528.0], [58.1, 1528.0], [58.2, 1528.0], [58.3, 1528.0], [58.4, 1528.0], [58.5, 1532.0], [58.6, 1532.0], [58.7, 1543.0], [58.8, 1543.0], [58.9, 1543.0], [59.0, 1549.0], [59.1, 1549.0], [59.2, 1555.0], [59.3, 1555.0], [59.4, 1555.0], [59.5, 1556.0], [59.6, 1556.0], [59.7, 1563.0], [59.8, 1563.0], [59.9, 1563.0], [60.0, 1581.0], [60.1, 1581.0], [60.2, 1581.0], [60.3, 1584.0], [60.4, 1584.0], [60.5, 1591.0], [60.6, 1591.0], [60.7, 1591.0], [60.8, 1597.0], [60.9, 1597.0], [61.0, 1600.0], [61.1, 1600.0], [61.2, 1600.0], [61.3, 1605.0], [61.4, 1605.0], [61.5, 1607.0], [61.6, 1607.0], [61.7, 1607.0], [61.8, 1611.0], [61.9, 1611.0], [62.0, 1616.0], [62.1, 1616.0], [62.2, 1616.0], [62.3, 1618.0], [62.4, 1618.0], [62.5, 1631.0], [62.6, 1631.0], [62.7, 1631.0], [62.8, 1634.0], [62.9, 1634.0], [63.0, 1634.0], [63.1, 1651.0], [63.2, 1651.0], [63.3, 1661.0], [63.4, 1661.0], [63.5, 1661.0], [63.6, 1665.0], [63.7, 1665.0], [63.8, 1673.0], [63.9, 1673.0], [64.0, 1673.0], [64.1, 1676.0], [64.2, 1676.0], [64.3, 1678.0], [64.4, 1678.0], [64.5, 1678.0], [64.6, 1694.0], [64.7, 1694.0], [64.8, 1698.0], [64.9, 1698.0], [65.0, 1698.0], [65.1, 1700.0], [65.2, 1700.0], [65.3, 1700.0], [65.4, 1700.0], [65.5, 1700.0], [65.6, 1702.0], [65.7, 1702.0], [65.8, 1702.0], [65.9, 1704.0], [66.0, 1704.0], [66.1, 1705.0], [66.2, 1705.0], [66.3, 1705.0], [66.4, 1708.0], [66.5, 1708.0], [66.6, 1710.0], [66.7, 1710.0], [66.8, 1710.0], [66.9, 1718.0], [67.0, 1718.0], [67.1, 1730.0], [67.2, 1730.0], [67.3, 1730.0], [67.4, 1732.0], [67.5, 1732.0], [67.6, 1732.0], [67.7, 1740.0], [67.8, 1740.0], [67.9, 1741.0], [68.0, 1741.0], [68.1, 1741.0], [68.2, 1741.0], [68.3, 1741.0], [68.4, 1741.0], [68.5, 1741.0], [68.6, 1741.0], [68.7, 1748.0], [68.8, 1748.0], [68.9, 1750.0], [69.0, 1750.0], [69.1, 1750.0], [69.2, 1754.0], [69.3, 1754.0], [69.4, 1757.0], [69.5, 1757.0], [69.6, 1757.0], [69.7, 1762.0], [69.8, 1762.0], [69.9, 1763.0], [70.0, 1763.0], [70.1, 1763.0], [70.2, 1765.0], [70.3, 1765.0], [70.4, 1765.0], [70.5, 1770.0], [70.6, 1770.0], [70.7, 1772.0], [70.8, 1772.0], [70.9, 1772.0], [71.0, 1776.0], [71.1, 1776.0], [71.2, 1783.0], [71.3, 1783.0], [71.4, 1783.0], [71.5, 1789.0], [71.6, 1789.0], [71.7, 1792.0], [71.8, 1792.0], [71.9, 1792.0], [72.0, 1806.0], [72.1, 1806.0], [72.2, 1810.0], [72.3, 1810.0], [72.4, 1810.0], [72.5, 1811.0], [72.6, 1811.0], [72.7, 1811.0], [72.8, 1813.0], [72.9, 1813.0], [73.0, 1814.0], [73.1, 1814.0], [73.2, 1814.0], [73.3, 1823.0], [73.4, 1823.0], [73.5, 1825.0], [73.6, 1825.0], [73.7, 1825.0], [73.8, 1841.0], [73.9, 1841.0], [74.0, 1843.0], [74.1, 1843.0], [74.2, 1843.0], [74.3, 1847.0], [74.4, 1847.0], [74.5, 1849.0], [74.6, 1849.0], [74.7, 1849.0], [74.8, 1849.0], [74.9, 1849.0], [75.0, 1851.0], [75.1, 1851.0], [75.2, 1851.0], [75.3, 1868.0], [75.4, 1868.0], [75.5, 1868.0], [75.6, 1880.0], [75.7, 1880.0], [75.8, 1886.0], [75.9, 1886.0], [76.0, 1886.0], [76.1, 1886.0], [76.2, 1886.0], [76.3, 1888.0], [76.4, 1888.0], [76.5, 1888.0], [76.6, 1891.0], [76.7, 1891.0], [76.8, 1895.0], [76.9, 1895.0], [77.0, 1895.0], [77.1, 1905.0], [77.2, 1905.0], [77.3, 1913.0], [77.4, 1913.0], [77.5, 1913.0], [77.6, 1917.0], [77.7, 1917.0], [77.8, 1917.0], [77.9, 1922.0], [78.0, 1922.0], [78.1, 1938.0], [78.2, 1938.0], [78.3, 1938.0], [78.4, 1947.0], [78.5, 1947.0], [78.6, 1951.0], [78.7, 1951.0], [78.8, 1951.0], [78.9, 1973.0], [79.0, 1973.0], [79.1, 1981.0], [79.2, 1981.0], [79.3, 1981.0], [79.4, 1996.0], [79.5, 1996.0], [79.6, 2005.0], [79.7, 2005.0], [79.8, 2005.0], [79.9, 2047.0], [80.0, 2047.0], [80.1, 2047.0], [80.2, 2051.0], [80.3, 2051.0], [80.4, 2082.0], [80.5, 2082.0], [80.6, 2082.0], [80.7, 2117.0], [80.8, 2117.0], [80.9, 2119.0], [81.0, 2119.0], [81.1, 2119.0], [81.2, 2143.0], [81.3, 2143.0], [81.4, 2148.0], [81.5, 2148.0], [81.6, 2148.0], [81.7, 2159.0], [81.8, 2159.0], [81.9, 2164.0], [82.0, 2164.0], [82.1, 2164.0], [82.2, 2196.0], [82.3, 2196.0], [82.4, 2213.0], [82.5, 2213.0], [82.6, 2213.0], [82.7, 2280.0], [82.8, 2280.0], [82.9, 2280.0], [83.0, 2308.0], [83.1, 2308.0], [83.2, 2309.0], [83.3, 2309.0], [83.4, 2309.0], [83.5, 2311.0], [83.6, 2311.0], [83.7, 2324.0], [83.8, 2324.0], [83.9, 2324.0], [84.0, 2356.0], [84.1, 2356.0], [84.2, 2362.0], [84.3, 2362.0], [84.4, 2362.0], [84.5, 2370.0], [84.6, 2370.0], [84.7, 2371.0], [84.8, 2371.0], [84.9, 2371.0], [85.0, 2389.0], [85.1, 2389.0], [85.2, 2389.0], [85.3, 2422.0], [85.4, 2422.0], [85.5, 2428.0], [85.6, 2428.0], [85.7, 2428.0], [85.8, 2434.0], [85.9, 2434.0], [86.0, 2465.0], [86.1, 2465.0], [86.2, 2465.0], [86.3, 2541.0], [86.4, 2541.0], [86.5, 2555.0], [86.6, 2555.0], [86.7, 2555.0], [86.8, 2573.0], [86.9, 2573.0], [87.0, 2599.0], [87.1, 2599.0], [87.2, 2599.0], [87.3, 2637.0], [87.4, 2637.0], [87.5, 2670.0], [87.6, 2670.0], [87.7, 2670.0], [87.8, 2683.0], [87.9, 2683.0], [88.0, 2683.0], [88.1, 2714.0], [88.2, 2714.0], [88.3, 2756.0], [88.4, 2756.0], [88.5, 2756.0], [88.6, 2775.0], [88.7, 2775.0], [88.8, 2781.0], [88.9, 2781.0], [89.0, 2781.0], [89.1, 2786.0], [89.2, 2786.0], [89.3, 2789.0], [89.4, 2789.0], [89.5, 2789.0], [89.6, 2815.0], [89.7, 2815.0], [89.8, 2832.0], [89.9, 2832.0], [90.0, 2832.0], [90.1, 2838.0], [90.2, 2838.0], [90.3, 2838.0], [90.4, 2855.0], [90.5, 2855.0], [90.6, 2862.0], [90.7, 2862.0], [90.8, 2862.0], [90.9, 2864.0], [91.0, 2864.0], [91.1, 2869.0], [91.2, 2869.0], [91.3, 2869.0], [91.4, 2873.0], [91.5, 2873.0], [91.6, 2875.0], [91.7, 2875.0], [91.8, 2875.0], [91.9, 2886.0], [92.0, 2886.0], [92.1, 2887.0], [92.2, 2887.0], [92.3, 2887.0], [92.4, 2917.0], [92.5, 2917.0], [92.6, 2917.0], [92.7, 2971.0], [92.8, 2971.0], [92.9, 2999.0], [93.0, 2999.0], [93.1, 2999.0], [93.2, 3021.0], [93.3, 3021.0], [93.4, 3060.0], [93.5, 3060.0], [93.6, 3060.0], [93.7, 3106.0], [93.8, 3106.0], [93.9, 3131.0], [94.0, 3131.0], [94.1, 3131.0], [94.2, 3148.0], [94.3, 3148.0], [94.4, 3185.0], [94.5, 3185.0], [94.6, 3185.0], [94.7, 3250.0], [94.8, 3250.0], [94.9, 3282.0], [95.0, 3282.0], [95.1, 3282.0], [95.2, 3334.0], [95.3, 3334.0], [95.4, 3334.0], [95.5, 3405.0], [95.6, 3405.0], [95.7, 3419.0], [95.8, 3419.0], [95.9, 3419.0], [96.0, 3462.0], [96.1, 3462.0], [96.2, 3483.0], [96.3, 3483.0], [96.4, 3483.0], [96.5, 3572.0], [96.6, 3572.0], [96.7, 3687.0], [96.8, 3687.0], [96.9, 3687.0], [97.0, 3755.0], [97.1, 3755.0], [97.2, 3778.0], [97.3, 3778.0], [97.4, 3778.0], [97.5, 4075.0], [97.6, 4075.0], [97.7, 4075.0], [97.8, 4193.0], [97.9, 4193.0], [98.0, 4743.0], [98.1, 4743.0], [98.2, 4743.0], [98.3, 5005.0], [98.4, 5005.0], [98.5, 5005.0], [98.6, 5005.0], [98.7, 5005.0], [98.8, 5006.0], [98.9, 5006.0], [99.0, 5006.0], [99.1, 5006.0], [99.2, 5006.0], [99.3, 5006.0], [99.4, 5006.0], [99.5, 5006.0], [99.6, 5006.0], [99.7, 5006.0], [99.8, 5007.0], [99.9, 5007.0]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 528.0, "series": [{"data": [[0.0, 168.0], [300.0, 67.0], [600.0, 85.0], [700.0, 4.0], [100.0, 39.0], [200.0, 24.0], [400.0, 414.0], [500.0, 528.0]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[300.0, 20.0], [600.0, 391.0], [700.0, 81.0], [100.0, 6.0], [400.0, 96.0], [200.0, 14.0], [800.0, 2.0], [500.0, 381.0]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[0.0, 12.0], [600.0, 5.0], [700.0, 8.0], [800.0, 16.0], [900.0, 30.0], [1000.0, 30.0], [1100.0, 22.0], [1200.0, 27.0], [1300.0, 23.0], [1400.0, 21.0], [1500.0, 15.0], [100.0, 13.0], [1600.0, 16.0], [1700.0, 27.0], [1800.0, 20.0], [1900.0, 10.0], [2000.0, 4.0], [2100.0, 7.0], [2300.0, 9.0], [2200.0, 2.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 3.0], [2700.0, 6.0], [2800.0, 11.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 4.0], [200.0, 4.0], [3200.0, 2.0], [3300.0, 1.0], [3400.0, 4.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [300.0, 5.0], [4700.0, 1.0], [5000.0, 7.0], [400.0, 1.0], [500.0, 7.0]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1654.0, "series": [{"data": [[0.0, 890.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1654.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 161.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 7.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.692087702573895, "minX": 1.56981072E12, "maxY": 9.839285714285714, "series": [{"data": [[1.56981078E12, 9.814814814814818], [1.56981072E12, 9.665775401069522]], "isOverall": false, "label": "Postgres PGP", "isController": false}, {"data": [[1.56981078E12, 9.839285714285714], [1.56981072E12, 8.692087702573895]], "isOverall": false, "label": "Local", "isController": false}, {"data": [[1.56981078E12, 9.49438202247191], [1.56981072E12, 9.003300330033]], "isOverall": false, "label": "Remote Encryptor", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56981078E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.000000000000004, "minX": 1.0, "maxY": 5007.0, "series": [{"data": [[9.0, 36.31818181818183], [11.0, 505.0], [3.0, 22.000000000000004], [12.0, 63.63414634146341], [13.0, 591.0], [15.0, 86.9], [17.0, 613.0], [18.0, 138.15384615384616], [21.0, 206.8181818181818], [22.0, 590.0], [6.0, 30.02777777777778], [24.0, 284.87499999999994], [25.0, 569.0], [27.0, 307.1538461538462], [30.0, 510.82156133828977]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[26.822422874341612, 434.56734386756983]], "isOverall": false, "label": "Users with local encryption-Aggregated", "isController": false}, {"data": [[8.0, 621.0], [9.0, 472.66666666666663], [10.0, 589.0], [3.0, 149.0], [12.0, 442.7142857142857], [15.0, 347.1111111111111], [18.0, 274.8333333333333], [19.0, 691.0], [21.0, 310.7], [23.0, 674.0], [6.0, 397.5], [24.0, 385.27272727272725], [26.0, 658.0], [27.0, 464.0833333333333], [28.0, 730.0], [29.0, 719.0], [30.0, 598.9551912568296]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[29.136226034308777, 583.0686175580227]], "isOverall": false, "label": "Users with PG PGP Encryption-Aggregated", "isController": false}, {"data": [[2.0, 5005.0], [9.0, 178.14285714285714], [3.0, 606.5555555555555], [12.0, 358.5], [14.0, 3483.0], [15.0, 486.1666666666667], [16.0, 1705.0], [4.0, 5006.0], [1.0, 5005.0], [18.0, 418.75], [20.0, 1277.0], [5.0, 5006.0], [21.0, 800.75], [6.0, 504.25], [24.0, 702.6666666666666], [27.0, 1233.8], [7.0, 5007.0], [30.0, 1647.1242424242423]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}, {"data": [[27.122448979591827, 1544.1530612244915]], "isOverall": false, "label": "Users with TCP encryption-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 30.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1561.25, "minX": 1.56981072E12, "maxY": 881648.1166666667, "series": [{"data": [[1.56981078E12, 262057.86666666667], [1.56981072E12, 881648.1166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56981078E12, 1561.25], [1.56981072E12, 5403.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56981078E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 400.99142040038174, "minX": 1.56981072E12, "maxY": 2209.9662921348313, "series": [{"data": [[1.56981078E12, 560.3571428571432], [1.56981072E12, 400.99142040038174]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.56981078E12, 646.2222222222223], [1.56981072E12, 562.5521390374336]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.56981078E12, 2209.9662921348313], [1.56981072E12, 1348.5841584158427]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56981078E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 400.4756911344145, "minX": 1.56981072E12, "maxY": 1816.0337078651683, "series": [{"data": [[1.56981078E12, 559.7214285714285], [1.56981072E12, 400.4756911344145]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.56981078E12, 645.7983539094647], [1.56981072E12, 562.1483957219255]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.56981078E12, 1816.0337078651683], [1.56981072E12, 1348.0924092409239]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56981078E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.29218106995884774, "minX": 1.56981072E12, "maxY": 0.462046204620462, "series": [{"data": [[1.56981078E12, 0.29285714285714265], [1.56981072E12, 0.4156339370829366]], "isOverall": false, "label": "Users with local encryption", "isController": false}, {"data": [[1.56981078E12, 0.29218106995884774], [1.56981072E12, 0.4465240641711229]], "isOverall": false, "label": "Users with PG PGP Encryption", "isController": false}, {"data": [[1.56981078E12, 0.34831460674157305], [1.56981072E12, 0.462046204620462]], "isOverall": false, "label": "Users with TCP encryption", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56981078E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.56981072E12, "maxY": 4743.0, "series": [{"data": [[1.56981078E12, 4743.0], [1.56981072E12, 4193.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56981078E12, 466.0], [1.56981072E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56981078E12, 1452.9999999999995], [1.56981072E12, 976.9000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56981078E12, 3146.979999999999], [1.56981072E12, 2788.9199999999983]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56981078E12, 1892.8999999999996], [1.56981072E12, 1498.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56981078E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 5006.5, "series": [{"data": [[32.0, 641.5], [35.0, 641.0], [36.0, 616.0], [37.0, 616.0], [38.0, 615.0], [39.0, 611.0], [41.0, 580.5], [40.0, 582.0], [42.0, 542.0], [43.0, 531.0], [45.0, 526.0], [44.0, 544.5], [46.0, 504.0], [49.0, 495.0], [48.0, 482.0], [52.0, 439.0], [54.0, 433.0], [55.0, 476.0], [60.0, 27.0], [68.0, 203.5], [84.0, 80.5], [92.0, 43.0], [28.0, 645.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 5006.5], [4.0, 5006.0], [1.0, 5005.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 645.0, "series": [{"data": [[32.0, 641.0], [35.0, 641.0], [36.0, 615.5], [37.0, 616.0], [38.0, 612.0], [39.0, 610.5], [41.0, 580.0], [40.0, 581.5], [42.0, 542.0], [43.0, 531.0], [45.0, 525.5], [44.0, 544.5], [46.0, 504.0], [49.0, 494.5], [48.0, 482.0], [52.0, 439.0], [54.0, 433.0], [55.0, 476.0], [60.0, 26.5], [68.0, 203.5], [84.0, 79.5], [92.0, 41.5], [28.0, 645.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [4.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.7, "minX": 1.56981072E12, "maxY": 35.5, "series": [{"data": [[1.56981078E12, 9.7], [1.56981072E12, 35.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56981078E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.56981072E12, "maxY": 35.0, "series": [{"data": [[1.56981078E12, 10.083333333333334], [1.56981072E12, 35.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.56981078E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56981078E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.56981072E12, "maxY": 17.483333333333334, "series": [{"data": [[1.56981078E12, 4.05], [1.56981072E12, 12.466666666666667]], "isOverall": false, "label": "Users with PG PGP Encryption-success", "isController": false}, {"data": [[1.56981078E12, 4.666666666666667], [1.56981072E12, 17.483333333333334]], "isOverall": false, "label": "Users with local encryption-success", "isController": false}, {"data": [[1.56981078E12, 1.3666666666666667], [1.56981072E12, 5.05]], "isOverall": false, "label": "Users with TCP encryption-success", "isController": false}, {"data": [[1.56981078E12, 0.11666666666666667]], "isOverall": false, "label": "Users with TCP encryption-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56981078E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.56981072E12, "maxY": 35.0, "series": [{"data": [[1.56981078E12, 10.083333333333334], [1.56981072E12, 35.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.56981078E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56981078E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

